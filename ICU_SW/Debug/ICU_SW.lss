
ICU_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00003200  00003294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800176  00800176  000033aa  2**0
                  ALLOC
  3 .stab         00002de4  00000000  00000000  000033ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000147f  00000000  00000000  00006190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000760f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f1  00000000  00000000  000077af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228e  00000000  00000000  000079a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ca  00000000  00000000  00009c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d4  00000000  00000000  0000aef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bfcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c9  00000000  00000000  0000c18c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ea  00000000  00000000  0000c455  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__vector_1>
       8:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__vector_2>
       c:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__vector_3>
      10:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__vector_4>
      14:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_5>
      18:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__vector_6>
      1c:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__vector_9>
      28:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_10>
      2c:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 39 17 	call	0x2e72	; 0x2e72 <main>
      8a:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x18>

000007b2 <__fixsfsi>:
     7b2:	ac e0       	ldi	r26, 0x0C	; 12
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__prologue_saves__+0x20>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	be 01       	movw	r22, r28
     7cc:	6b 5f       	subi	r22, 0xFB	; 251
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f1       	breq	.+88     	; 0x832 <__fixsfsi+0x80>
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	50 f1       	brcs	.+84     	; 0x832 <__fixsfsi+0x80>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	21 f4       	brne	.+8      	; 0x7ea <__fixsfsi+0x38>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	88 23       	and	r24, r24
     7e6:	51 f1       	breq	.+84     	; 0x83c <__fixsfsi+0x8a>
     7e8:	2e c0       	rjmp	.+92     	; 0x846 <__fixsfsi+0x94>
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	38 85       	ldd	r19, Y+8	; 0x08
     7ee:	37 fd       	sbrc	r19, 7
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <__fixsfsi+0x80>
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	2f 31       	cpi	r18, 0x1F	; 31
     7f6:	31 05       	cpc	r19, r1
     7f8:	1c f0       	brlt	.+6      	; 0x800 <__fixsfsi+0x4e>
     7fa:	66 23       	and	r22, r22
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__fixsfsi+0x8a>
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <__fixsfsi+0x94>
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	29 85       	ldd	r18, Y+9	; 0x09
     80a:	3a 85       	ldd	r19, Y+10	; 0x0a
     80c:	4b 85       	ldd	r20, Y+11	; 0x0b
     80e:	5c 85       	ldd	r21, Y+12	; 0x0c
     810:	04 c0       	rjmp	.+8      	; 0x81a <__fixsfsi+0x68>
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	37 95       	ror	r19
     818:	27 95       	ror	r18
     81a:	8a 95       	dec	r24
     81c:	d2 f7       	brpl	.-12     	; 0x812 <__fixsfsi+0x60>
     81e:	66 23       	and	r22, r22
     820:	b1 f0       	breq	.+44     	; 0x84e <__fixsfsi+0x9c>
     822:	50 95       	com	r21
     824:	40 95       	com	r20
     826:	30 95       	com	r19
     828:	21 95       	neg	r18
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	0e c0       	rjmp	.+28     	; 0x84e <__fixsfsi+0x9c>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__fixsfsi+0x9c>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f ef       	ldi	r20, 0xFF	; 255
     842:	5f e7       	ldi	r21, 0x7F	; 127
     844:	04 c0       	rjmp	.+8      	; 0x84e <__fixsfsi+0x9c>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e8       	ldi	r21, 0x80	; 128
     84e:	b9 01       	movw	r22, r18
     850:	ca 01       	movw	r24, r20
     852:	2c 96       	adiw	r28, 0x0c	; 12
     854:	e2 e0       	ldi	r30, 0x02	; 2
     856:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__epilogue_restores__+0x20>

0000085a <__floatunsisf>:
     85a:	a8 e0       	ldi	r26, 0x08	; 8
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e3 e3       	ldi	r30, 0x33	; 51
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	0c 94 cf 18 	jmp	0x319e	; 0x319e <__prologue_saves__+0x10>
     866:	7b 01       	movw	r14, r22
     868:	8c 01       	movw	r16, r24
     86a:	61 15       	cp	r22, r1
     86c:	71 05       	cpc	r23, r1
     86e:	81 05       	cpc	r24, r1
     870:	91 05       	cpc	r25, r1
     872:	19 f4       	brne	.+6      	; 0x87a <__stack+0x1b>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	60 c0       	rjmp	.+192    	; 0x93a <__stack+0xdb>
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	c8 2e       	mov	r12, r24
     882:	d1 2c       	mov	r13, r1
     884:	dc 82       	std	Y+4, r13	; 0x04
     886:	cb 82       	std	Y+3, r12	; 0x03
     888:	ed 82       	std	Y+5, r14	; 0x05
     88a:	fe 82       	std	Y+6, r15	; 0x06
     88c:	0f 83       	std	Y+7, r16	; 0x07
     88e:	18 87       	std	Y+8, r17	; 0x08
     890:	c8 01       	movw	r24, r16
     892:	b7 01       	movw	r22, r14
     894:	0e 94 a6 04 	call	0x94c	; 0x94c <__clzsi2>
     898:	fc 01       	movw	r30, r24
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f7 ff       	sbrs	r31, 7
     89e:	3b c0       	rjmp	.+118    	; 0x916 <__stack+0xb7>
     8a0:	22 27       	eor	r18, r18
     8a2:	33 27       	eor	r19, r19
     8a4:	2e 1b       	sub	r18, r30
     8a6:	3f 0b       	sbc	r19, r31
     8a8:	57 01       	movw	r10, r14
     8aa:	68 01       	movw	r12, r16
     8ac:	02 2e       	mov	r0, r18
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	d6 94       	lsr	r13
     8b2:	c7 94       	ror	r12
     8b4:	b7 94       	ror	r11
     8b6:	a7 94       	ror	r10
     8b8:	0a 94       	dec	r0
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <__stack+0x51>
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	2a 95       	dec	r18
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__stack+0x6f>
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	a1 09       	sbc	r26, r1
     8de:	b1 09       	sbc	r27, r1
     8e0:	8e 21       	and	r24, r14
     8e2:	9f 21       	and	r25, r15
     8e4:	a0 23       	and	r26, r16
     8e6:	b1 23       	and	r27, r17
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	4a 29       	or	r20, r10
     8fa:	5b 29       	or	r21, r11
     8fc:	6c 29       	or	r22, r12
     8fe:	7d 29       	or	r23, r13
     900:	4d 83       	std	Y+5, r20	; 0x05
     902:	5e 83       	std	Y+6, r21	; 0x06
     904:	6f 83       	std	Y+7, r22	; 0x07
     906:	78 87       	std	Y+8, r23	; 0x08
     908:	8e e1       	ldi	r24, 0x1E	; 30
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	8e 1b       	sub	r24, r30
     90e:	9f 0b       	sbc	r25, r31
     910:	9c 83       	std	Y+4, r25	; 0x04
     912:	8b 83       	std	Y+3, r24	; 0x03
     914:	12 c0       	rjmp	.+36     	; 0x93a <__stack+0xdb>
     916:	30 97       	sbiw	r30, 0x00	; 0
     918:	81 f0       	breq	.+32     	; 0x93a <__stack+0xdb>
     91a:	0e 2e       	mov	r0, r30
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0xc7>
     91e:	ee 0c       	add	r14, r14
     920:	ff 1c       	adc	r15, r15
     922:	00 1f       	adc	r16, r16
     924:	11 1f       	adc	r17, r17
     926:	0a 94       	dec	r0
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0xbf>
     92a:	ed 82       	std	Y+5, r14	; 0x05
     92c:	fe 82       	std	Y+6, r15	; 0x06
     92e:	0f 83       	std	Y+7, r16	; 0x07
     930:	18 87       	std	Y+8, r17	; 0x08
     932:	ce 1a       	sub	r12, r30
     934:	df 0a       	sbc	r13, r31
     936:	dc 82       	std	Y+4, r13	; 0x04
     938:	cb 82       	std	Y+3, r12	; 0x03
     93a:	1a 82       	std	Y+2, r1	; 0x02
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     944:	28 96       	adiw	r28, 0x08	; 8
     946:	ea e0       	ldi	r30, 0x0A	; 10
     948:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <__epilogue_restores__+0x10>

0000094c <__clzsi2>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	7b 01       	movw	r14, r22
     956:	8c 01       	movw	r16, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	e8 16       	cp	r14, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	f8 06       	cpc	r15, r24
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 07       	cpc	r16, r24
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	18 07       	cpc	r17, r24
     968:	88 f4       	brcc	.+34     	; 0x98c <__clzsi2+0x40>
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	e8 16       	cp	r14, r24
     96e:	f1 04       	cpc	r15, r1
     970:	01 05       	cpc	r16, r1
     972:	11 05       	cpc	r17, r1
     974:	31 f0       	breq	.+12     	; 0x982 <__clzsi2+0x36>
     976:	28 f0       	brcs	.+10     	; 0x982 <__clzsi2+0x36>
     978:	88 e0       	ldi	r24, 0x08	; 8
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	17 c0       	rjmp	.+46     	; 0x9b0 <__clzsi2+0x64>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <__clzsi2+0x64>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	e8 16       	cp	r14, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	f8 06       	cpc	r15, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	08 07       	cpc	r16, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	18 07       	cpc	r17, r24
     99c:	28 f0       	brcs	.+10     	; 0x9a8 <__clzsi2+0x5c>
     99e:	88 e1       	ldi	r24, 0x18	; 24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__clzsi2+0x64>
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	20 e2       	ldi	r18, 0x20	; 32
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	4a 0b       	sbc	r20, r26
     9be:	5b 0b       	sbc	r21, r27
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__clzsi2+0x7e>
     9c2:	16 95       	lsr	r17
     9c4:	07 95       	ror	r16
     9c6:	f7 94       	ror	r15
     9c8:	e7 94       	ror	r14
     9ca:	8a 95       	dec	r24
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__clzsi2+0x76>
     9ce:	f7 01       	movw	r30, r14
     9d0:	eb 58       	subi	r30, 0x8B	; 139
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	80 81       	ld	r24, Z
     9d6:	28 1b       	sub	r18, r24
     9d8:	31 09       	sbc	r19, r1
     9da:	41 09       	sbc	r20, r1
     9dc:	51 09       	sbc	r21, r1
     9de:	c9 01       	movw	r24, r18
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <__pack_f>:
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	fc 01       	movw	r30, r24
     9f6:	e4 80       	ldd	r14, Z+4	; 0x04
     9f8:	f5 80       	ldd	r15, Z+5	; 0x05
     9fa:	06 81       	ldd	r16, Z+6	; 0x06
     9fc:	17 81       	ldd	r17, Z+7	; 0x07
     9fe:	d1 80       	ldd	r13, Z+1	; 0x01
     a00:	80 81       	ld	r24, Z
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	48 f4       	brcc	.+18     	; 0xa18 <__pack_f+0x2e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e1       	ldi	r26, 0x10	; 16
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 2a       	or	r14, r24
     a10:	f9 2a       	or	r15, r25
     a12:	0a 2b       	or	r16, r26
     a14:	1b 2b       	or	r17, r27
     a16:	a5 c0       	rjmp	.+330    	; 0xb62 <__pack_f+0x178>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__pack_f+0x34>
     a1c:	9f c0       	rjmp	.+318    	; 0xb5c <__pack_f+0x172>
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	21 f4       	brne	.+8      	; 0xa2a <__pack_f+0x40>
     a22:	ee 24       	eor	r14, r14
     a24:	ff 24       	eor	r15, r15
     a26:	87 01       	movw	r16, r14
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <__pack_f+0x4a>
     a2a:	e1 14       	cp	r14, r1
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__pack_f+0x50>
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	96 c0       	rjmp	.+300    	; 0xb66 <__pack_f+0x17c>
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	62 38       	cpi	r22, 0x82	; 130
     a42:	79 07       	cpc	r23, r25
     a44:	0c f0       	brlt	.+2      	; 0xa48 <__pack_f+0x5e>
     a46:	5b c0       	rjmp	.+182    	; 0xafe <__pack_f+0x114>
     a48:	22 e8       	ldi	r18, 0x82	; 130
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	26 1b       	sub	r18, r22
     a4e:	37 0b       	sbc	r19, r23
     a50:	2a 31       	cpi	r18, 0x1A	; 26
     a52:	31 05       	cpc	r19, r1
     a54:	2c f0       	brlt	.+10     	; 0xa60 <__pack_f+0x76>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	2a c0       	rjmp	.+84     	; 0xab4 <__pack_f+0xca>
     a60:	b8 01       	movw	r22, r16
     a62:	a7 01       	movw	r20, r14
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0x86>
     a68:	76 95       	lsr	r23
     a6a:	67 95       	ror	r22
     a6c:	57 95       	ror	r21
     a6e:	47 95       	ror	r20
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__pack_f+0x7e>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__pack_f+0x9c>
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	2a 95       	dec	r18
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__pack_f+0x94>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	a1 09       	sbc	r26, r1
     a8e:	b1 09       	sbc	r27, r1
     a90:	8e 21       	and	r24, r14
     a92:	9f 21       	and	r25, r15
     a94:	a0 23       	and	r26, r16
     a96:	b1 23       	and	r27, r17
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 05       	cpc	r26, r1
     a9c:	b1 05       	cpc	r27, r1
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <__pack_f+0xbe>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	9a 01       	movw	r18, r20
     aaa:	ab 01       	movw	r20, r22
     aac:	28 2b       	or	r18, r24
     aae:	39 2b       	or	r19, r25
     ab0:	4a 2b       	or	r20, r26
     ab2:	5b 2b       	or	r21, r27
     ab4:	da 01       	movw	r26, r20
     ab6:	c9 01       	movw	r24, r18
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	a0 70       	andi	r26, 0x00	; 0
     abe:	b0 70       	andi	r27, 0x00	; 0
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__pack_f+0xee>
     aca:	27 ff       	sbrs	r18, 7
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__pack_f+0xf6>
     ace:	20 5c       	subi	r18, 0xC0	; 192
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	4f 4f       	sbci	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__pack_f+0xf6>
     ad8:	21 5c       	subi	r18, 0xC1	; 193
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	3a 07       	cpc	r19, r26
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	4a 07       	cpc	r20, r26
     aee:	a0 e4       	ldi	r26, 0x40	; 64
     af0:	5a 07       	cpc	r21, r26
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <__pack_f+0x10e>
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	79 01       	movw	r14, r18
     afa:	8a 01       	movw	r16, r20
     afc:	27 c0       	rjmp	.+78     	; 0xb4c <__pack_f+0x162>
     afe:	60 38       	cpi	r22, 0x80	; 128
     b00:	71 05       	cpc	r23, r1
     b02:	64 f5       	brge	.+88     	; 0xb5c <__pack_f+0x172>
     b04:	fb 01       	movw	r30, r22
     b06:	e1 58       	subi	r30, 0x81	; 129
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	d8 01       	movw	r26, r16
     b0c:	c7 01       	movw	r24, r14
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	90 70       	andi	r25, 0x00	; 0
     b12:	a0 70       	andi	r26, 0x00	; 0
     b14:	b0 70       	andi	r27, 0x00	; 0
     b16:	80 34       	cpi	r24, 0x40	; 64
     b18:	91 05       	cpc	r25, r1
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__pack_f+0x144>
     b20:	e7 fe       	sbrs	r14, 7
     b22:	0d c0       	rjmp	.+26     	; 0xb3e <__pack_f+0x154>
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__pack_f+0x14c>
     b2e:	8f e3       	ldi	r24, 0x3F	; 63
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e8 0e       	add	r14, r24
     b38:	f9 1e       	adc	r15, r25
     b3a:	0a 1f       	adc	r16, r26
     b3c:	1b 1f       	adc	r17, r27
     b3e:	17 ff       	sbrs	r17, 7
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__pack_f+0x162>
     b42:	16 95       	lsr	r17
     b44:	07 95       	ror	r16
     b46:	f7 94       	ror	r15
     b48:	e7 94       	ror	r14
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	16 95       	lsr	r17
     b50:	07 95       	ror	r16
     b52:	f7 94       	ror	r15
     b54:	e7 94       	ror	r14
     b56:	8a 95       	dec	r24
     b58:	d1 f7       	brne	.-12     	; 0xb4e <__pack_f+0x164>
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <__pack_f+0x17c>
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	87 01       	movw	r16, r14
     b62:	ef ef       	ldi	r30, 0xFF	; 255
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	6e 2f       	mov	r22, r30
     b68:	67 95       	ror	r22
     b6a:	66 27       	eor	r22, r22
     b6c:	67 95       	ror	r22
     b6e:	90 2f       	mov	r25, r16
     b70:	9f 77       	andi	r25, 0x7F	; 127
     b72:	d7 94       	ror	r13
     b74:	dd 24       	eor	r13, r13
     b76:	d7 94       	ror	r13
     b78:	8e 2f       	mov	r24, r30
     b7a:	86 95       	lsr	r24
     b7c:	49 2f       	mov	r20, r25
     b7e:	46 2b       	or	r20, r22
     b80:	58 2f       	mov	r21, r24
     b82:	5d 29       	or	r21, r13
     b84:	b7 01       	movw	r22, r14
     b86:	ca 01       	movw	r24, r20
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <__unpack_f>:
     b94:	fc 01       	movw	r30, r24
     b96:	db 01       	movw	r26, r22
     b98:	40 81       	ld	r20, Z
     b9a:	51 81       	ldd	r21, Z+1	; 0x01
     b9c:	22 81       	ldd	r18, Z+2	; 0x02
     b9e:	62 2f       	mov	r22, r18
     ba0:	6f 77       	andi	r22, 0x7F	; 127
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	22 1f       	adc	r18, r18
     ba6:	22 27       	eor	r18, r18
     ba8:	22 1f       	adc	r18, r18
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	89 2f       	mov	r24, r25
     bae:	88 0f       	add	r24, r24
     bb0:	82 2b       	or	r24, r18
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	99 1f       	adc	r25, r25
     bb8:	99 27       	eor	r25, r25
     bba:	99 1f       	adc	r25, r25
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	11 97       	sbiw	r26, 0x01	; 1
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	a9 f5       	brne	.+106    	; 0xc32 <__unpack_f+0x9e>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <__unpack_f+0x42>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	37 c0       	rjmp	.+110    	; 0xc44 <__unpack_f+0xb0>
     bd6:	82 e8       	ldi	r24, 0x82	; 130
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	9c 93       	st	X, r25
     bde:	8e 93       	st	-X, r24
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	9a 01       	movw	r18, r20
     be4:	ab 01       	movw	r20, r22
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	6a 95       	dec	r22
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__unpack_f+0x54>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	8c 93       	st	X, r24
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__unpack_f+0x80>
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	44 1f       	adc	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 93       	st	X, r25
     c10:	8e 93       	st	-X, r24
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	20 30       	cpi	r18, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	38 07       	cpc	r19, r24
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	48 07       	cpc	r20, r24
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	58 07       	cpc	r21, r24
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__unpack_f+0x66>
     c24:	14 96       	adiw	r26, 0x04	; 4
     c26:	2d 93       	st	X+, r18
     c28:	3d 93       	st	X+, r19
     c2a:	4d 93       	st	X+, r20
     c2c:	5c 93       	st	X, r21
     c2e:	17 97       	sbiw	r26, 0x07	; 7
     c30:	08 95       	ret
     c32:	2f 3f       	cpi	r18, 0xFF	; 255
     c34:	31 05       	cpc	r19, r1
     c36:	79 f4       	brne	.+30     	; 0xc56 <__unpack_f+0xc2>
     c38:	41 15       	cp	r20, r1
     c3a:	51 05       	cpc	r21, r1
     c3c:	61 05       	cpc	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	19 f4       	brne	.+6      	; 0xc48 <__unpack_f+0xb4>
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	08 95       	ret
     c48:	64 ff       	sbrs	r22, 4
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <__unpack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	8c 93       	st	X, r24
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <__unpack_f+0xe2>
     c52:	1c 92       	st	X, r1
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <__unpack_f+0xe2>
     c56:	2f 57       	subi	r18, 0x7F	; 127
     c58:	30 40       	sbci	r19, 0x00	; 0
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	3c 93       	st	X, r19
     c5e:	2e 93       	st	-X, r18
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	8c 93       	st	X, r24
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	8a 95       	dec	r24
     c72:	d1 f7       	brne	.-12     	; 0xc68 <__unpack_f+0xd4>
     c74:	70 64       	ori	r23, 0x40	; 64
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	4d 93       	st	X+, r20
     c7a:	5d 93       	st	X+, r21
     c7c:	6d 93       	st	X+, r22
     c7e:	7c 93       	st	X, r23
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	08 95       	ret

00000c84 <__fpcmp_parts_f>:
     c84:	1f 93       	push	r17
     c86:	dc 01       	movw	r26, r24
     c88:	fb 01       	movw	r30, r22
     c8a:	9c 91       	ld	r25, X
     c8c:	92 30       	cpi	r25, 0x02	; 2
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <__fpcmp_parts_f+0xe>
     c90:	47 c0       	rjmp	.+142    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c92:	80 81       	ld	r24, Z
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__fpcmp_parts_f+0x16>
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c9a:	94 30       	cpi	r25, 0x04	; 4
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <__fpcmp_parts_f+0x2e>
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	1c 91       	ld	r17, X
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	99 f5       	brne	.+102    	; 0xd0c <__fpcmp_parts_f+0x88>
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	68 2f       	mov	r22, r24
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	61 1b       	sub	r22, r17
     cae:	71 09       	sbc	r23, r1
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <__fpcmp_parts_f+0xac>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__fpcmp_parts_f+0x3a>
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__fpcmp_parts_f+0x42>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	b9 f1       	breq	.+110    	; 0xd2c <__fpcmp_parts_f+0xa8>
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	89 f1       	breq	.+98     	; 0xd26 <__fpcmp_parts_f+0xa2>
     cc4:	2d c0       	rjmp	.+90     	; 0xd20 <__fpcmp_parts_f+0x9c>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 91       	ld	r17, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	f1 f0       	breq	.+60     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	18 17       	cp	r17, r24
     cd4:	d9 f4       	brne	.+54     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	94 f0       	brlt	.+36     	; 0xd0c <__fpcmp_parts_f+0x88>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	bc f0       	brlt	.+46     	; 0xd1c <__fpcmp_parts_f+0x98>
     cee:	14 96       	adiw	r26, 0x04	; 4
     cf0:	8d 91       	ld	r24, X+
     cf2:	9d 91       	ld	r25, X+
     cf4:	0d 90       	ld	r0, X+
     cf6:	bc 91       	ld	r27, X
     cf8:	a0 2d       	mov	r26, r0
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	46 81       	ldd	r20, Z+6	; 0x06
     d00:	57 81       	ldd	r21, Z+7	; 0x07
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	4a 07       	cpc	r20, r26
     d08:	5b 07       	cpc	r21, r27
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <__fpcmp_parts_f+0x8e>
     d0c:	11 23       	and	r17, r17
     d0e:	41 f0       	breq	.+16     	; 0xd20 <__fpcmp_parts_f+0x9c>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <__fpcmp_parts_f+0xa2>
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	a4 07       	cpc	r26, r20
     d18:	b5 07       	cpc	r27, r21
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fpcmp_parts_f+0xa8>
     d1c:	11 23       	and	r17, r17
     d1e:	19 f0       	breq	.+6      	; 0xd26 <__fpcmp_parts_f+0xa2>
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <__fpcmp_parts_f+0xac>
     d26:	6f ef       	ldi	r22, 0xFF	; 255
     d28:	7f ef       	ldi	r23, 0xFF	; 255
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <__fpcmp_parts_f+0xac>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	cb 01       	movw	r24, r22
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <TMR2_VidSetCallBackForOVF>:
/**GLOBAL POINTER TO FUNCTION**/
static void (*Gpfunc1)(void)=NULL;
static void (*Gpfunc2)(void)=NULL;
/********CALL BACK FUNCTION*****/
void TMR2_VidSetCallBackForOVF(void (*Lpfunc)(void))
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <TMR2_VidSetCallBackForOVF+0x6>
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	89 83       	std	Y+1, r24	; 0x01
	Gpfunc1=Lpfunc;
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	9a 81       	ldd	r25, Y+2	; 0x02
     d48:	90 93 77 01 	sts	0x0177, r25
     d4c:	80 93 76 01 	sts	0x0176, r24
}
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <TMR2_VidSetCallBackForCTC>:
void TMR2_VidSetCallBackForCTC(void (*Lpfunc)(void))
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <TMR2_VidSetCallBackForCTC+0x6>
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	89 83       	std	Y+1, r24	; 0x01
	Gpfunc2=Lpfunc;
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	90 93 79 01 	sts	0x0179, r25
     d70:	80 93 78 01 	sts	0x0178, r24
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <__vector_5>:

/*************ISR FOR TIMR2**********/
ISR(__vector_5)
{
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
	if(Gpfunc1 != NULL)
     da8:	80 91 76 01 	lds	r24, 0x0176
     dac:	90 91 77 01 	lds	r25, 0x0177
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	29 f0       	breq	.+10     	; 0xdbe <__vector_5+0x40>
	{
		Gpfunc1();
     db4:	e0 91 76 01 	lds	r30, 0x0176
     db8:	f0 91 77 01 	lds	r31, 0x0177
     dbc:	09 95       	icall
	}
}
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	ff 91       	pop	r31
     dc4:	ef 91       	pop	r30
     dc6:	bf 91       	pop	r27
     dc8:	af 91       	pop	r26
     dca:	9f 91       	pop	r25
     dcc:	8f 91       	pop	r24
     dce:	7f 91       	pop	r23
     dd0:	6f 91       	pop	r22
     dd2:	5f 91       	pop	r21
     dd4:	4f 91       	pop	r20
     dd6:	3f 91       	pop	r19
     dd8:	2f 91       	pop	r18
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti

00000de4 <__vector_4>:

ISR(__vector_4)
{
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	11 24       	eor	r1, r1
     dee:	2f 93       	push	r18
     df0:	3f 93       	push	r19
     df2:	4f 93       	push	r20
     df4:	5f 93       	push	r21
     df6:	6f 93       	push	r22
     df8:	7f 93       	push	r23
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	af 93       	push	r26
     e00:	bf 93       	push	r27
     e02:	ef 93       	push	r30
     e04:	ff 93       	push	r31
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
	if(Gpfunc2 != NULL)
     e0e:	80 91 78 01 	lds	r24, 0x0178
     e12:	90 91 79 01 	lds	r25, 0x0179
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	29 f0       	breq	.+10     	; 0xe24 <__vector_4+0x40>
	{
		Gpfunc2();
     e1a:	e0 91 78 01 	lds	r30, 0x0178
     e1e:	f0 91 79 01 	lds	r31, 0x0179
     e22:	09 95       	icall
	}
}
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	7f 91       	pop	r23
     e36:	6f 91       	pop	r22
     e38:	5f 91       	pop	r21
     e3a:	4f 91       	pop	r20
     e3c:	3f 91       	pop	r19
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <TMR2_VidInit>:

void TMR2_VidInit(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	/***************************MOODS OF TIMER0************************************/
	#if     TIMER2_Mood==Normal_MOOD
    CLR_BIT(TCCR2,WGM20);
     e52:	a5 e4       	ldi	r26, 0x45	; 69
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e4       	ldi	r30, 0x45	; 69
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7b       	andi	r24, 0xBF	; 191
     e5e:	8c 93       	st	X, r24
    CLR_BIT(TCCR2,WGM21);
     e60:	a5 e4       	ldi	r26, 0x45	; 69
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e4       	ldi	r30, 0x45	; 69
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	87 7f       	andi	r24, 0xF7	; 247
     e6c:	8c 93       	st	X, r24
    #elif    Prescaler_Mood_TIMER2 ==PRESCALER_TIMER2_8
    CLR_BIT(TCCR2,CS20);
    SET_BIT(TCCR2,CS21);
    CLR_BIT(TCCR2,CS22);
    #elif    Prescaler_Mood_TIMER2 ==PRESCALER_TIMER2_64
    SET_BIT(TCCR2,CS20);
     e6e:	a5 e4       	ldi	r26, 0x45	; 69
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e5 e4       	ldi	r30, 0x45	; 69
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	8c 93       	st	X, r24
    SET_BIT(TCCR2,CS21);
     e7c:	a5 e4       	ldi	r26, 0x45	; 69
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e5 e4       	ldi	r30, 0x45	; 69
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	8c 93       	st	X, r24
    CLR_BIT(TCCR2,CS22);
     e8a:	a5 e4       	ldi	r26, 0x45	; 69
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e5 e4       	ldi	r30, 0x45	; 69
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8b 7f       	andi	r24, 0xFB	; 251
     e96:	8c 93       	st	X, r24
    SET_BIT(TCCR2,CS21);
    SET_BIT(TCCR2,CS22);
	#endif
	/*************************** TIMER2 OC2_PIN**********************/
	#if  OC2_MOOD==Normal_port_operation
    CLR_BIT(TCCR2,COM20);
     e98:	a5 e4       	ldi	r26, 0x45	; 69
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e5 e4       	ldi	r30, 0x45	; 69
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7e       	andi	r24, 0xEF	; 239
     ea4:	8c 93       	st	X, r24
    CLR_BIT(TCCR2,COM21);
     ea6:	a5 e4       	ldi	r26, 0x45	; 69
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e5 e4       	ldi	r30, 0x45	; 69
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7d       	andi	r24, 0xDF	; 223
     eb2:	8c 93       	st	X, r24
    SET_BIT(TCCR2,COM21);
    #elif   OC2_MOOD==Set_OC2 
    SET_BIT(TCCR2,COM20);
    SET_BIT(TCCR2,COM21);
    #endif
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <TMR2_VidOverFlowInterruptEnable>:

void TMR2_VidOverFlowInterruptEnable(void)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE2);
     ec2:	a9 e5       	ldi	r26, 0x59	; 89
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e9 e5       	ldi	r30, 0x59	; 89
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 64       	ori	r24, 0x40	; 64
     ece:	8c 93       	st	X, r24
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <TMR2_VidOutputCompareMatchInterruptEnable>:

void TMR2_VidOutputCompareMatchInterruptEnable(void)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE2);
     ede:	a9 e5       	ldi	r26, 0x59	; 89
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e9 e5       	ldi	r30, 0x59	; 89
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 68       	ori	r24, 0x80	; 128
     eea:	8c 93       	st	X, r24
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <TMR2_VidPreLoadingTheCounter>:

void TMR2_VidPreLoadingTheCounter(u8 LOC_u8PreLoading_Value)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=LOC_u8PreLoading_Value;
     efe:	e4 e4       	ldi	r30, 0x44	; 68
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	80 83       	st	Z, r24
}
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <TMR2_VidCompareMatchValue>:

void TMR2_VidCompareMatchValue(u8 LOC_u8CompareMatchValue)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	0f 92       	push	r0
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	89 83       	std	Y+1, r24	; 0x01
	OCR2=LOC_u8CompareMatchValue;
     f1a:	e3 e4       	ldi	r30, 0x43	; 67
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	80 83       	st	Z, r24
}
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <TMR2_VidSetDutyCycle>:

void TMR2_VidSetDutyCycle(u8 LOC_u8DutyPercentage)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	0f 92       	push	r0
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	89 83       	std	Y+1, r24	; 0x01
	OCR2=(LOC_u8DutyPercentage*255)/100;
     f36:	e3 e4       	ldi	r30, 0x43	; 67
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	48 2f       	mov	r20, r24
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	ca 01       	movw	r24, r20
     f42:	9c 01       	movw	r18, r24
     f44:	22 0f       	add	r18, r18
     f46:	33 1f       	adc	r19, r19
     f48:	c9 01       	movw	r24, r18
     f4a:	96 95       	lsr	r25
     f4c:	98 2f       	mov	r25, r24
     f4e:	88 27       	eor	r24, r24
     f50:	97 95       	ror	r25
     f52:	87 95       	ror	r24
     f54:	82 1b       	sub	r24, r18
     f56:	93 0b       	sbc	r25, r19
     f58:	84 0f       	add	r24, r20
     f5a:	95 1f       	adc	r25, r21
     f5c:	24 e6       	ldi	r18, 0x64	; 100
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	b9 01       	movw	r22, r18
     f62:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__divmodhi4>
     f66:	cb 01       	movw	r24, r22
     f68:	80 83       	st	Z, r24
}
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <TMR1_VidSetCallBackForOVF>:
static void (*Gpfunc1)(void)=NULL;
static void (*Gpfunc2)(void)=NULL;
static void (*Gpfunc3)(void)=NULL;
/********CALL BACK FUNCTION*****/
void TMR1_VidSetCallBackForOVF(void (*Lpfunc)(void))
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <TMR1_VidSetCallBackForOVF+0x6>
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
	Gpfunc1=Lpfunc;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	90 93 7b 01 	sts	0x017B, r25
     f88:	80 93 7a 01 	sts	0x017A, r24
}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <TMR1_VidSetCallBackForCTC>:
void TMR1_VidSetCallBackForCTC(void (*Lpfunc)(void))
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <TMR1_VidSetCallBackForCTC+0x6>
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
	Gpfunc2=Lpfunc;
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	9a 81       	ldd	r25, Y+2	; 0x02
     fa8:	90 93 7d 01 	sts	0x017D, r25
     fac:	80 93 7c 01 	sts	0x017C, r24
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <TMR1_VidSetCallBackForCaptureUnit>:
void TMR1_VidSetCallBackForCaptureUnit(void (*Lpfunc)(void))
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <TMR1_VidSetCallBackForCaptureUnit+0x6>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01
	Gpfunc3=Lpfunc;
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
     fcc:	90 93 7f 01 	sts	0x017F, r25
     fd0:	80 93 7e 01 	sts	0x017E, r24
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <__vector_9>:

/*************ISR FOR TIMR1**********/
ISR(__vector_9)
{
     fde:	1f 92       	push	r1
     fe0:	0f 92       	push	r0
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	0f 92       	push	r0
     fe6:	11 24       	eor	r1, r1
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	ef 93       	push	r30
     ffe:	ff 93       	push	r31
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	if(Gpfunc1 != NULL)
    1008:	80 91 7a 01 	lds	r24, 0x017A
    100c:	90 91 7b 01 	lds	r25, 0x017B
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	29 f0       	breq	.+10     	; 0x101e <__vector_9+0x40>
	{
		Gpfunc1();
    1014:	e0 91 7a 01 	lds	r30, 0x017A
    1018:	f0 91 7b 01 	lds	r31, 0x017B
    101c:	09 95       	icall
	}
}
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	ff 91       	pop	r31
    1024:	ef 91       	pop	r30
    1026:	bf 91       	pop	r27
    1028:	af 91       	pop	r26
    102a:	9f 91       	pop	r25
    102c:	8f 91       	pop	r24
    102e:	7f 91       	pop	r23
    1030:	6f 91       	pop	r22
    1032:	5f 91       	pop	r21
    1034:	4f 91       	pop	r20
    1036:	3f 91       	pop	r19
    1038:	2f 91       	pop	r18
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <__vector_7>:

ISR(__vector_7)
{
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	2f 93       	push	r18
    1050:	3f 93       	push	r19
    1052:	4f 93       	push	r20
    1054:	5f 93       	push	r21
    1056:	6f 93       	push	r22
    1058:	7f 93       	push	r23
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
    105e:	af 93       	push	r26
    1060:	bf 93       	push	r27
    1062:	ef 93       	push	r30
    1064:	ff 93       	push	r31
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
	if(Gpfunc2 != NULL)
    106e:	80 91 7c 01 	lds	r24, 0x017C
    1072:	90 91 7d 01 	lds	r25, 0x017D
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	29 f0       	breq	.+10     	; 0x1084 <__vector_7+0x40>
	{
		Gpfunc2();
    107a:	e0 91 7c 01 	lds	r30, 0x017C
    107e:	f0 91 7d 01 	lds	r31, 0x017D
    1082:	09 95       	icall
	}
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	bf 91       	pop	r27
    108e:	af 91       	pop	r26
    1090:	9f 91       	pop	r25
    1092:	8f 91       	pop	r24
    1094:	7f 91       	pop	r23
    1096:	6f 91       	pop	r22
    1098:	5f 91       	pop	r21
    109a:	4f 91       	pop	r20
    109c:	3f 91       	pop	r19
    109e:	2f 91       	pop	r18
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	0f 90       	pop	r0
    10a6:	1f 90       	pop	r1
    10a8:	18 95       	reti

000010aa <__vector_6>:
ISR(__vector_6)
{
    10aa:	1f 92       	push	r1
    10ac:	0f 92       	push	r0
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	0f 92       	push	r0
    10b2:	11 24       	eor	r1, r1
    10b4:	2f 93       	push	r18
    10b6:	3f 93       	push	r19
    10b8:	4f 93       	push	r20
    10ba:	5f 93       	push	r21
    10bc:	6f 93       	push	r22
    10be:	7f 93       	push	r23
    10c0:	8f 93       	push	r24
    10c2:	9f 93       	push	r25
    10c4:	af 93       	push	r26
    10c6:	bf 93       	push	r27
    10c8:	ef 93       	push	r30
    10ca:	ff 93       	push	r31
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
	if(Gpfunc3 != NULL)
    10d4:	80 91 7e 01 	lds	r24, 0x017E
    10d8:	90 91 7f 01 	lds	r25, 0x017F
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	29 f0       	breq	.+10     	; 0x10ea <__vector_6+0x40>
	{
		Gpfunc1();
    10e0:	e0 91 7a 01 	lds	r30, 0x017A
    10e4:	f0 91 7b 01 	lds	r31, 0x017B
    10e8:	09 95       	icall
	}
}
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	bf 91       	pop	r27
    10f4:	af 91       	pop	r26
    10f6:	9f 91       	pop	r25
    10f8:	8f 91       	pop	r24
    10fa:	7f 91       	pop	r23
    10fc:	6f 91       	pop	r22
    10fe:	5f 91       	pop	r21
    1100:	4f 91       	pop	r20
    1102:	3f 91       	pop	r19
    1104:	2f 91       	pop	r18
    1106:	0f 90       	pop	r0
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	0f 90       	pop	r0
    110c:	1f 90       	pop	r1
    110e:	18 95       	reti

00001110 <TMR1_VidInit>:

void TMR1_VidInit(void)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	/***************************MOODS OF TIMER0************************************/
	#if     TIMER1_Mood==Normal_MOOD
    CLR_BIT(TCCR1A,WGM10);
    1118:	af e4       	ldi	r26, 0x4F	; 79
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	ef e4       	ldi	r30, 0x4F	; 79
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8e 7f       	andi	r24, 0xFE	; 254
    1124:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,WGM11);
    1126:	af e4       	ldi	r26, 0x4F	; 79
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ef e4       	ldi	r30, 0x4F	; 79
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	8d 7f       	andi	r24, 0xFD	; 253
    1132:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,WGM12);
    1134:	ae e4       	ldi	r26, 0x4E	; 78
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ee e4       	ldi	r30, 0x4E	; 78
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	87 7f       	andi	r24, 0xF7	; 247
    1140:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,WGM13);
    1142:	ae e4       	ldi	r26, 0x4E	; 78
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	ee e4       	ldi	r30, 0x4E	; 78
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8f 7e       	andi	r24, 0xEF	; 239
    114e:	8c 93       	st	X, r24
    #elif    Prescaler_Mood_TIMER1 ==PRESCALER_TIMER1_8
    CLR_BIT(TCCR1B,CS10);
    SET_BIT(TCCR1B,CS11);
    CLR_BIT(TCCR1B,CS12);
    #elif    Prescaler_Mood_TIMER1 ==PRESCALER_TIMER1_64
    SET_BIT(TCCR1B,CS10);
    1150:	ae e4       	ldi	r26, 0x4E	; 78
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ee e4       	ldi	r30, 0x4E	; 78
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	81 60       	ori	r24, 0x01	; 1
    115c:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,CS11);
    115e:	ae e4       	ldi	r26, 0x4E	; 78
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	ee e4       	ldi	r30, 0x4E	; 78
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	82 60       	ori	r24, 0x02	; 2
    116a:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,CS12);
    116c:	ae e4       	ldi	r26, 0x4E	; 78
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	ee e4       	ldi	r30, 0x4E	; 78
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	8b 7f       	andi	r24, 0xFB	; 251
    1178:	8c 93       	st	X, r24
	#endif
	/*************************** TIMER2 OC1_PIN**********************/
	#if   OC1_CHANNEL==OC1A_CHANNEL
	
	#if  OC1A_CHANNEL==Normal_port_operation
	CLR_BIT(TCCR1A,COM1A0);
    117a:	af e4       	ldi	r26, 0x4F	; 79
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	ef e4       	ldi	r30, 0x4F	; 79
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8f 7b       	andi	r24, 0xBF	; 191
    1186:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1A1);
    1188:	af e4       	ldi	r26, 0x4F	; 79
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	ef e4       	ldi	r30, 0x4F	; 79
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8f 77       	andi	r24, 0x7F	; 127
    1194:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
	#endif
	
    #if OC1_CHANNEL==OC1B_CHANNEL
	CLR_BIT(TCCR1A,COM1B0);
    1196:	af e4       	ldi	r26, 0x4F	; 79
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	ef e4       	ldi	r30, 0x4F	; 79
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8f 7e       	andi	r24, 0xEF	; 239
    11a2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1B1);
    11a4:	af e4       	ldi	r26, 0x4F	; 79
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ef e4       	ldi	r30, 0x4F	; 79
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	8f 7d       	andi	r24, 0xDF	; 223
    11b0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B0);
	SET_BIT(TCCR1A,COM1B1);
	#endif

    #endif
}
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <TMR1_VidOverFlowInterruptEnable>:

void TMR1_VidOverFlowInterruptEnable(void)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    11c0:	a9 e5       	ldi	r26, 0x59	; 89
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e9 e5       	ldi	r30, 0x59	; 89
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	84 60       	ori	r24, 0x04	; 4
    11cc:	8c 93       	st	X, r24
}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <TMR1_VidOutputCompareMatchInterruptEnable_A>:

void TMR1_VidOutputCompareMatchInterruptEnable_A(void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    11dc:	a9 e5       	ldi	r26, 0x59	; 89
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e9 e5       	ldi	r30, 0x59	; 89
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 61       	ori	r24, 0x10	; 16
    11e8:	8c 93       	st	X, r24
}
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <TMR1_VidOutputCompareMatchInterruptEnable_B>:
void TMR1_VidOutputCompareMatchInterruptEnable_B(void)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
    11f8:	a9 e5       	ldi	r26, 0x59	; 89
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e9 e5       	ldi	r30, 0x59	; 89
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	88 60       	ori	r24, 0x08	; 8
    1204:	8c 93       	st	X, r24
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <TMR1_VidPreLoadingTheCounter>:

void TMR1_VidPreLoadingTheCounter(u16 LOC_u8PreLoading_Value)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <TMR1_VidPreLoadingTheCounter+0x6>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=LOC_u8PreLoading_Value;
    121a:	ec e4       	ldi	r30, 0x4C	; 76
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	80 83       	st	Z, r24
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <TMR1_VidCompareMatchValue_A>:

void TMR1_VidCompareMatchValue_A(u16 LOC_u8CompareMatchValue)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <TMR1_VidCompareMatchValue_A+0x6>
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	9a 83       	std	Y+2, r25	; 0x02
    123c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=LOC_u8CompareMatchValue;
    123e:	ea e4       	ldi	r30, 0x4A	; 74
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	9a 81       	ldd	r25, Y+2	; 0x02
    1246:	91 83       	std	Z+1, r25	; 0x01
    1248:	80 83       	st	Z, r24
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <TMR1_VidCompareMatchValue_B>:
void TMR1_VidCompareMatchValue_B(u16 LOC_u8CompareMatchValue)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <TMR1_VidCompareMatchValue_B+0x6>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=LOC_u8CompareMatchValue;
    1262:	e8 e4       	ldi	r30, 0x48	; 72
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24
}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <TMR1_VidSetDutyCycle>:

void TMR1_VidSetDutyCycle(u16 LOC_u8TonValue)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <TMR1_VidSetDutyCycle+0x6>
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	9a 83       	std	Y+2, r25	; 0x02
    1284:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=LOC_u8TonValue;
    1286:	ea e4       	ldi	r30, 0x4A	; 74
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	91 83       	std	Z+1, r25	; 0x01
    1290:	80 83       	st	Z, r24
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <TMR1_VidSetICRRegister>:

void TMR1_VidSetICRRegister(u16 LOC_u8ICR_Value)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <TMR1_VidSetICRRegister+0x6>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01
	ICR1=LOC_u8ICR_Value;
    12aa:	e6 e4       	ldi	r30, 0x46	; 70
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	80 83       	st	Z, r24
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <TMR1_VidInputCaptureInterruptEnable>:
void TMR1_VidInputCaptureInterruptEnable(void)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    12c8:	a9 e5       	ldi	r26, 0x59	; 89
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e9 e5       	ldi	r30, 0x59	; 89
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	80 62       	ori	r24, 0x20	; 32
    12d4:	8c 93       	st	X, r24
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <TMR0_VidSetCallBackForOVF>:
/**GLOBAL POINTER TO FUNCTION**/
static void (*Gpfunc1)(void)=NULL;
static void (*Gpfunc2)(void)=NULL;
/********CALL BACK FUNCTION*****/
void TMR0_VidSetCallBackForOVF(void (*Lpfunc)(void))
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <TMR0_VidSetCallBackForOVF+0x6>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01
	Gpfunc1=Lpfunc;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	90 93 81 01 	sts	0x0181, r25
    12f2:	80 93 80 01 	sts	0x0180, r24
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <TMR0_VidSetCallBackForCTC>:
void TMR0_VidSetCallBackForCTC(void (*Lpfunc)(void))
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <TMR0_VidSetCallBackForCTC+0x6>
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
	Gpfunc2=Lpfunc;
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	90 93 83 01 	sts	0x0183, r25
    1316:	80 93 82 01 	sts	0x0182, r24
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <__vector_11>:

/*************ISR FOR TIMR0**********/
ISR(__vector_11)
{
    1324:	1f 92       	push	r1
    1326:	0f 92       	push	r0
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	0f 92       	push	r0
    132c:	11 24       	eor	r1, r1
    132e:	2f 93       	push	r18
    1330:	3f 93       	push	r19
    1332:	4f 93       	push	r20
    1334:	5f 93       	push	r21
    1336:	6f 93       	push	r22
    1338:	7f 93       	push	r23
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
    133e:	af 93       	push	r26
    1340:	bf 93       	push	r27
    1342:	ef 93       	push	r30
    1344:	ff 93       	push	r31
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
	if(Gpfunc1 != NULL)
    134e:	80 91 80 01 	lds	r24, 0x0180
    1352:	90 91 81 01 	lds	r25, 0x0181
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	29 f0       	breq	.+10     	; 0x1364 <__vector_11+0x40>
	{
		Gpfunc1();
    135a:	e0 91 80 01 	lds	r30, 0x0180
    135e:	f0 91 81 01 	lds	r31, 0x0181
    1362:	09 95       	icall
	}
}
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	ff 91       	pop	r31
    136a:	ef 91       	pop	r30
    136c:	bf 91       	pop	r27
    136e:	af 91       	pop	r26
    1370:	9f 91       	pop	r25
    1372:	8f 91       	pop	r24
    1374:	7f 91       	pop	r23
    1376:	6f 91       	pop	r22
    1378:	5f 91       	pop	r21
    137a:	4f 91       	pop	r20
    137c:	3f 91       	pop	r19
    137e:	2f 91       	pop	r18
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_10>:

ISR(__vector_10)
{
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	if(Gpfunc2 != NULL)
    13b4:	80 91 82 01 	lds	r24, 0x0182
    13b8:	90 91 83 01 	lds	r25, 0x0183
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	29 f0       	breq	.+10     	; 0x13ca <__vector_10+0x40>
	{
		Gpfunc2();
    13c0:	e0 91 82 01 	lds	r30, 0x0182
    13c4:	f0 91 83 01 	lds	r31, 0x0183
    13c8:	09 95       	icall
	}
}
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	ff 91       	pop	r31
    13d0:	ef 91       	pop	r30
    13d2:	bf 91       	pop	r27
    13d4:	af 91       	pop	r26
    13d6:	9f 91       	pop	r25
    13d8:	8f 91       	pop	r24
    13da:	7f 91       	pop	r23
    13dc:	6f 91       	pop	r22
    13de:	5f 91       	pop	r21
    13e0:	4f 91       	pop	r20
    13e2:	3f 91       	pop	r19
    13e4:	2f 91       	pop	r18
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	0f 90       	pop	r0
    13ec:	1f 90       	pop	r1
    13ee:	18 95       	reti

000013f0 <TMR0_VidInit>:

void TMR0_VidInit(void)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TCCR0,WGM01);
    #elif    TIMER0_Mood==CTC_MOOD
    CLR_BIT(TCCR0,WGM00);
    SET_BIT(TCCR0,WGM01);
    #elif   TIMER0_Mood==FAST_PWM_MOOD 
    SET_BIT(TCCR0,WGM00);
    13f8:	a3 e5       	ldi	r26, 0x53	; 83
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e3 e5       	ldi	r30, 0x53	; 83
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 64       	ori	r24, 0x40	; 64
    1404:	8c 93       	st	X, r24
    SET_BIT(TCCR0,WGM01);
    1406:	a3 e5       	ldi	r26, 0x53	; 83
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e3 e5       	ldi	r30, 0x53	; 83
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 60       	ori	r24, 0x08	; 8
    1412:	8c 93       	st	X, r24
    #elif    Prescaler_Mood==PRESCALER_TIMER0_8
    CLR_BIT(TCCR0,CS00);
    SET_BIT(TCCR0,CS01);
    CLR_BIT(TCCR0,CS02);
    #elif    Prescaler_Mood==PRESCALER_TIMER0_64
    SET_BIT(TCCR0,CS00);
    1414:	a3 e5       	ldi	r26, 0x53	; 83
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e3 e5       	ldi	r30, 0x53	; 83
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	81 60       	ori	r24, 0x01	; 1
    1420:	8c 93       	st	X, r24
    SET_BIT(TCCR0,CS01);
    1422:	a3 e5       	ldi	r26, 0x53	; 83
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e3 e5       	ldi	r30, 0x53	; 83
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	82 60       	ori	r24, 0x02	; 2
    142e:	8c 93       	st	X, r24
    CLR_BIT(TCCR0,CS02);
    1430:	a3 e5       	ldi	r26, 0x53	; 83
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e3 e5       	ldi	r30, 0x53	; 83
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	8b 7f       	andi	r24, 0xFB	; 251
    143c:	8c 93       	st	X, r24
    CLR_BIT(TCCR0,COM01);
	#elif   OC0_MOOD==Reserved
    SET_BIT(TCCR0,COM00);
    CLR_BIT(TCCR0,COM01);
    #elif    OC0_MOOD==Clear_OC0 
    CLR_BIT(TCCR0,COM00);
    143e:	a3 e5       	ldi	r26, 0x53	; 83
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e3 e5       	ldi	r30, 0x53	; 83
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8f 7e       	andi	r24, 0xEF	; 239
    144a:	8c 93       	st	X, r24
    SET_BIT(TCCR0,COM01);
    144c:	a3 e5       	ldi	r26, 0x53	; 83
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e3 e5       	ldi	r30, 0x53	; 83
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	80 62       	ori	r24, 0x20	; 32
    1458:	8c 93       	st	X, r24
    #elif   OC0_MOOD==Set_OC0 
    SET_BIT(TCCR0,COM00);
    SET_BIT(TCCR0,COM01);
    #endif
}
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <TMR0_VidOverFlowInterruptEnable>:

void TMR0_VidOverFlowInterruptEnable(void)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    1468:	a9 e5       	ldi	r26, 0x59	; 89
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e9 e5       	ldi	r30, 0x59	; 89
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	81 60       	ori	r24, 0x01	; 1
    1474:	8c 93       	st	X, r24
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <TMR0_VidOutputCompareMatchInterruptEnable>:

void TMR0_VidOutputCompareMatchInterruptEnable(void)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
    1484:	a9 e5       	ldi	r26, 0x59	; 89
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e9 e5       	ldi	r30, 0x59	; 89
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	82 60       	ori	r24, 0x02	; 2
    1490:	8c 93       	st	X, r24
}
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <TMR0_VidPreLoadingTheCounter>:

void TMR0_VidPreLoadingTheCounter(u8 LOC_u8PreLoading_Value)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	0f 92       	push	r0
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=LOC_u8PreLoading_Value;
    14a4:	e2 e5       	ldi	r30, 0x52	; 82
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	80 83       	st	Z, r24
}
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <TMR0_VidCompareMatchValue>:

void TMR0_VidCompareMatchValue(u8 LOC_u8CompareMatchValue)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	0f 92       	push	r0
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	89 83       	std	Y+1, r24	; 0x01
	OCR0=LOC_u8CompareMatchValue;
    14c0:	ec e5       	ldi	r30, 0x5C	; 92
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	80 83       	st	Z, r24
}
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <TMR0_VidSetDutyCycle>:

void TMR0_VidSetDutyCycle(u8 LOC_u8DutyPercentage)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	89 83       	std	Y+1, r24	; 0x01
	OCR0=(LOC_u8DutyPercentage*255)/100;
    14dc:	ec e5       	ldi	r30, 0x5C	; 92
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	48 2f       	mov	r20, r24
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	ca 01       	movw	r24, r20
    14e8:	9c 01       	movw	r18, r24
    14ea:	22 0f       	add	r18, r18
    14ec:	33 1f       	adc	r19, r19
    14ee:	c9 01       	movw	r24, r18
    14f0:	96 95       	lsr	r25
    14f2:	98 2f       	mov	r25, r24
    14f4:	88 27       	eor	r24, r24
    14f6:	97 95       	ror	r25
    14f8:	87 95       	ror	r24
    14fa:	82 1b       	sub	r24, r18
    14fc:	93 0b       	sbc	r25, r19
    14fe:	84 0f       	add	r24, r20
    1500:	95 1f       	adc	r25, r21
    1502:	24 e6       	ldi	r18, 0x64	; 100
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	b9 01       	movw	r22, r18
    1508:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__divmodhi4>
    150c:	cb 01       	movw	r24, r22
    150e:	80 83       	st	Z, r24
}
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <GIE_VidDISABLE>:
#include"GIE_Priv.h"
#include"GIE_Config.h"


void GIE_VidDISABLE(void)
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(SREG,GIE_ENABLE);
    1520:	af e5       	ldi	r26, 0x5F	; 95
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	ef e5       	ldi	r30, 0x5F	; 95
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8f 77       	andi	r24, 0x7F	; 127
    152c:	8c 93       	st	X, r24
}		
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <GIE_VidENABLE>:

void GIE_VidENABLE(void)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG,GIE_ENABLE);
    153c:	af e5       	ldi	r26, 0x5F	; 95
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ef e5       	ldi	r30, 0x5F	; 95
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	80 68       	ori	r24, 0x80	; 128
    1548:	8c 93       	st	X, r24
}
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <INT0_VidSetCallBack>:
static void (*Gpfunc1)(void)=NULL;
static void (*Gpfunc2)(void)=NULL;
static void (*Gpfunc3)(void)=NULL;
/********CALL BACK FUNCTION*****/
void INT0_VidSetCallBack(void (*Lpfunc)(void))
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <INT0_VidSetCallBack+0x6>
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	89 83       	std	Y+1, r24	; 0x01
	Gpfunc1=Lpfunc;
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	90 93 85 01 	sts	0x0185, r25
    1566:	80 93 84 01 	sts	0x0184, r24
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <INT1_VidSetCallBack>:
void INT1_VidSetCallBack(void (*Lpfunc)(void))
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <INT1_VidSetCallBack+0x6>
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01
	Gpfunc2=Lpfunc;
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	90 93 87 01 	sts	0x0187, r25
    158a:	80 93 86 01 	sts	0x0186, r24
}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <INT2_VidSetCallBack>:
void INT2_VidSetCallBack(void (*Lpfunc)(void))
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <INT2_VidSetCallBack+0x6>
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
	Gpfunc3=Lpfunc;
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	90 93 89 01 	sts	0x0189, r25
    15ae:	80 93 88 01 	sts	0x0188, r24
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <__vector_1>:

/*************ISR FOR EXTERNAL INTERRUPT**********/
ISR(__vector_1)
{
    15bc:	1f 92       	push	r1
    15be:	0f 92       	push	r0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	0f 92       	push	r0
    15c4:	11 24       	eor	r1, r1
    15c6:	2f 93       	push	r18
    15c8:	3f 93       	push	r19
    15ca:	4f 93       	push	r20
    15cc:	5f 93       	push	r21
    15ce:	6f 93       	push	r22
    15d0:	7f 93       	push	r23
    15d2:	8f 93       	push	r24
    15d4:	9f 93       	push	r25
    15d6:	af 93       	push	r26
    15d8:	bf 93       	push	r27
    15da:	ef 93       	push	r30
    15dc:	ff 93       	push	r31
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
	if(Gpfunc1 != NULL)
    15e6:	80 91 84 01 	lds	r24, 0x0184
    15ea:	90 91 85 01 	lds	r25, 0x0185
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	29 f0       	breq	.+10     	; 0x15fc <__vector_1+0x40>
	{
		Gpfunc1();
    15f2:	e0 91 84 01 	lds	r30, 0x0184
    15f6:	f0 91 85 01 	lds	r31, 0x0185
    15fa:	09 95       	icall
	}
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	bf 91       	pop	r27
    1606:	af 91       	pop	r26
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	7f 91       	pop	r23
    160e:	6f 91       	pop	r22
    1610:	5f 91       	pop	r21
    1612:	4f 91       	pop	r20
    1614:	3f 91       	pop	r19
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	0f 90       	pop	r0
    161e:	1f 90       	pop	r1
    1620:	18 95       	reti

00001622 <__vector_2>:
ISR(__vector_2)
{
    1622:	1f 92       	push	r1
    1624:	0f 92       	push	r0
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	0f 92       	push	r0
    162a:	11 24       	eor	r1, r1
    162c:	2f 93       	push	r18
    162e:	3f 93       	push	r19
    1630:	4f 93       	push	r20
    1632:	5f 93       	push	r21
    1634:	6f 93       	push	r22
    1636:	7f 93       	push	r23
    1638:	8f 93       	push	r24
    163a:	9f 93       	push	r25
    163c:	af 93       	push	r26
    163e:	bf 93       	push	r27
    1640:	ef 93       	push	r30
    1642:	ff 93       	push	r31
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
	if(Gpfunc2 != NULL)
    164c:	80 91 86 01 	lds	r24, 0x0186
    1650:	90 91 87 01 	lds	r25, 0x0187
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	29 f0       	breq	.+10     	; 0x1662 <__vector_2+0x40>
	{
		Gpfunc2();
    1658:	e0 91 86 01 	lds	r30, 0x0186
    165c:	f0 91 87 01 	lds	r31, 0x0187
    1660:	09 95       	icall
	}
}
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	ff 91       	pop	r31
    1668:	ef 91       	pop	r30
    166a:	bf 91       	pop	r27
    166c:	af 91       	pop	r26
    166e:	9f 91       	pop	r25
    1670:	8f 91       	pop	r24
    1672:	7f 91       	pop	r23
    1674:	6f 91       	pop	r22
    1676:	5f 91       	pop	r21
    1678:	4f 91       	pop	r20
    167a:	3f 91       	pop	r19
    167c:	2f 91       	pop	r18
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0f 90       	pop	r0
    1684:	1f 90       	pop	r1
    1686:	18 95       	reti

00001688 <__vector_3>:
ISR(__vector_3)
{
    1688:	1f 92       	push	r1
    168a:	0f 92       	push	r0
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	0f 92       	push	r0
    1690:	11 24       	eor	r1, r1
    1692:	2f 93       	push	r18
    1694:	3f 93       	push	r19
    1696:	4f 93       	push	r20
    1698:	5f 93       	push	r21
    169a:	6f 93       	push	r22
    169c:	7f 93       	push	r23
    169e:	8f 93       	push	r24
    16a0:	9f 93       	push	r25
    16a2:	af 93       	push	r26
    16a4:	bf 93       	push	r27
    16a6:	ef 93       	push	r30
    16a8:	ff 93       	push	r31
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
	if(Gpfunc3 != NULL)
    16b2:	80 91 88 01 	lds	r24, 0x0188
    16b6:	90 91 89 01 	lds	r25, 0x0189
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	29 f0       	breq	.+10     	; 0x16c8 <__vector_3+0x40>
	{
		Gpfunc3();
    16be:	e0 91 88 01 	lds	r30, 0x0188
    16c2:	f0 91 89 01 	lds	r31, 0x0189
    16c6:	09 95       	icall
	}
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <EXT0_ENABLE>:


void EXT0_ENABLE(void)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
	/***INT0 ENABLE***/
	SET_BIT(GICR,INT0_ENABLE); 
    16f6:	ab e5       	ldi	r26, 0x5B	; 91
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	eb e5       	ldi	r30, 0x5B	; 91
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	80 64       	ori	r24, 0x40	; 64
    1702:	8c 93       	st	X, r24
}
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <EXT1_ENABLE>:
void EXT1_ENABLE(void)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
	/***INT1 ENABLE***/
   SET_BIT(GICR,INT1_ENABLE); 
    1712:	ab e5       	ldi	r26, 0x5B	; 91
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	eb e5       	ldi	r30, 0x5B	; 91
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	80 68       	ori	r24, 0x80	; 128
    171e:	8c 93       	st	X, r24
}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <EXT2_ENABLE>:

void EXT2_ENABLE(void)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
	/***INT2 ENABLE***/
   SET_BIT(GICR,INT2_ENABLE); 
    172e:	ab e5       	ldi	r26, 0x5B	; 91
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	eb e5       	ldi	r30, 0x5B	; 91
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	80 62       	ori	r24, 0x20	; 32
    173a:	8c 93       	st	X, r24
   
}
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <EXT0_MOOD>:

void EXT0_MOOD(u8 LOC_u8SenseControl)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	00 d0       	rcall	.+0      	; 0x1748 <EXT0_MOOD+0x6>
    1748:	0f 92       	push	r0
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	89 83       	std	Y+1, r24	; 0x01
	switch (LOC_u8SenseControl)
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	3b 83       	std	Y+3, r19	; 0x03
    1758:	2a 83       	std	Y+2, r18	; 0x02
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	91 05       	cpc	r25, r1
    1762:	21 f1       	breq	.+72     	; 0x17ac <EXT0_MOOD+0x6a>
    1764:	2a 81       	ldd	r18, Y+2	; 0x02
    1766:	3b 81       	ldd	r19, Y+3	; 0x03
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 05       	cpc	r19, r1
    176c:	2c f4       	brge	.+10     	; 0x1778 <EXT0_MOOD+0x36>
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	9b 81       	ldd	r25, Y+3	; 0x03
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	61 f0       	breq	.+24     	; 0x178e <EXT0_MOOD+0x4c>
    1776:	46 c0       	rjmp	.+140    	; 0x1804 <EXT0_MOOD+0xc2>
    1778:	2a 81       	ldd	r18, Y+2	; 0x02
    177a:	3b 81       	ldd	r19, Y+3	; 0x03
    177c:	22 30       	cpi	r18, 0x02	; 2
    177e:	31 05       	cpc	r19, r1
    1780:	21 f1       	breq	.+72     	; 0x17ca <EXT0_MOOD+0x88>
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	83 30       	cpi	r24, 0x03	; 3
    1788:	91 05       	cpc	r25, r1
    178a:	71 f1       	breq	.+92     	; 0x17e8 <EXT0_MOOD+0xa6>
    178c:	3b c0       	rjmp	.+118    	; 0x1804 <EXT0_MOOD+0xc2>
	{
		case Falling_edge:
		CLR_BIT(MCUCR,ISC00);
    178e:	a5 e5       	ldi	r26, 0x55	; 85
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e5 e5       	ldi	r30, 0x55	; 85
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8e 7f       	andi	r24, 0xFE	; 254
    179a:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC01);
    179c:	a5 e5       	ldi	r26, 0x55	; 85
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e5 e5       	ldi	r30, 0x55	; 85
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	82 60       	ori	r24, 0x02	; 2
    17a8:	8c 93       	st	X, r24
    17aa:	2c c0       	rjmp	.+88     	; 0x1804 <EXT0_MOOD+0xc2>
		break;
		case Rising_edge :
		SET_BIT(MCUCR,ISC00);
    17ac:	a5 e5       	ldi	r26, 0x55	; 85
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e5 e5       	ldi	r30, 0x55	; 85
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	81 60       	ori	r24, 0x01	; 1
    17b8:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC01);
    17ba:	a5 e5       	ldi	r26, 0x55	; 85
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e5 e5       	ldi	r30, 0x55	; 85
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	82 60       	ori	r24, 0x02	; 2
    17c6:	8c 93       	st	X, r24
    17c8:	1d c0       	rjmp	.+58     	; 0x1804 <EXT0_MOOD+0xc2>
		break;
		case Low_level   :
		CLR_BIT(MCUCR,ISC00);
    17ca:	a5 e5       	ldi	r26, 0x55	; 85
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e5       	ldi	r30, 0x55	; 85
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8e 7f       	andi	r24, 0xFE	; 254
    17d6:	8c 93       	st	X, r24
	    CLR_BIT(MCUCR,ISC01);
    17d8:	a5 e5       	ldi	r26, 0x55	; 85
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e5 e5       	ldi	r30, 0x55	; 85
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	8d 7f       	andi	r24, 0xFD	; 253
    17e4:	8c 93       	st	X, r24
    17e6:	0e c0       	rjmp	.+28     	; 0x1804 <EXT0_MOOD+0xc2>
		break;
		case Any_change  :
		SET_BIT(MCUCR,ISC00);
    17e8:	a5 e5       	ldi	r26, 0x55	; 85
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e5 e5       	ldi	r30, 0x55	; 85
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	81 60       	ori	r24, 0x01	; 1
    17f4:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,ISC01);
    17f6:	a5 e5       	ldi	r26, 0x55	; 85
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e5 e5       	ldi	r30, 0x55	; 85
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	8d 7f       	andi	r24, 0xFD	; 253
    1802:	8c 93       	st	X, r24
		break;
	}
} 
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <EXT1_MOOD>:

void EXT1_MOOD(u8 LOC_u8SenseControl)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <EXT1_MOOD+0x6>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
	switch (LOC_u8SenseControl)   
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3b 83       	std	Y+3, r19	; 0x03
    1826:	2a 83       	std	Y+2, r18	; 0x02
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	91 05       	cpc	r25, r1
    1830:	21 f1       	breq	.+72     	; 0x187a <EXT1_MOOD+0x6a>
    1832:	2a 81       	ldd	r18, Y+2	; 0x02
    1834:	3b 81       	ldd	r19, Y+3	; 0x03
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	31 05       	cpc	r19, r1
    183a:	2c f4       	brge	.+10     	; 0x1846 <EXT1_MOOD+0x36>
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	9b 81       	ldd	r25, Y+3	; 0x03
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	61 f0       	breq	.+24     	; 0x185c <EXT1_MOOD+0x4c>
    1844:	46 c0       	rjmp	.+140    	; 0x18d2 <EXT1_MOOD+0xc2>
    1846:	2a 81       	ldd	r18, Y+2	; 0x02
    1848:	3b 81       	ldd	r19, Y+3	; 0x03
    184a:	22 30       	cpi	r18, 0x02	; 2
    184c:	31 05       	cpc	r19, r1
    184e:	21 f1       	breq	.+72     	; 0x1898 <EXT1_MOOD+0x88>
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
    1854:	83 30       	cpi	r24, 0x03	; 3
    1856:	91 05       	cpc	r25, r1
    1858:	71 f1       	breq	.+92     	; 0x18b6 <EXT1_MOOD+0xa6>
    185a:	3b c0       	rjmp	.+118    	; 0x18d2 <EXT1_MOOD+0xc2>
	{        
		case Falling_edge:
		CLR_BIT(MCUCR,ISC10);
    185c:	a5 e5       	ldi	r26, 0x55	; 85
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e5 e5       	ldi	r30, 0x55	; 85
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	8b 7f       	andi	r24, 0xFB	; 251
    1868:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);
    186a:	a5 e5       	ldi	r26, 0x55	; 85
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e5 e5       	ldi	r30, 0x55	; 85
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	88 60       	ori	r24, 0x08	; 8
    1876:	8c 93       	st	X, r24
    1878:	2c c0       	rjmp	.+88     	; 0x18d2 <EXT1_MOOD+0xc2>
		break;
		case Rising_edge :
		SET_BIT(MCUCR,ISC10);
    187a:	a5 e5       	ldi	r26, 0x55	; 85
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e5 e5       	ldi	r30, 0x55	; 85
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	84 60       	ori	r24, 0x04	; 4
    1886:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);
    1888:	a5 e5       	ldi	r26, 0x55	; 85
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e5 e5       	ldi	r30, 0x55	; 85
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	88 60       	ori	r24, 0x08	; 8
    1894:	8c 93       	st	X, r24
    1896:	1d c0       	rjmp	.+58     	; 0x18d2 <EXT1_MOOD+0xc2>
		break;
		case Low_level   :
		CLR_BIT(MCUCR,ISC10);
    1898:	a5 e5       	ldi	r26, 0x55	; 85
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e5 e5       	ldi	r30, 0x55	; 85
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8b 7f       	andi	r24, 0xFB	; 251
    18a4:	8c 93       	st	X, r24
	    CLR_BIT(MCUCR,ISC11);
    18a6:	a5 e5       	ldi	r26, 0x55	; 85
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e5 e5       	ldi	r30, 0x55	; 85
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	87 7f       	andi	r24, 0xF7	; 247
    18b2:	8c 93       	st	X, r24
    18b4:	0e c0       	rjmp	.+28     	; 0x18d2 <EXT1_MOOD+0xc2>
		break;
		case Any_change  :
		SET_BIT(MCUCR,ISC10);
    18b6:	a5 e5       	ldi	r26, 0x55	; 85
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e5 e5       	ldi	r30, 0x55	; 85
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	84 60       	ori	r24, 0x04	; 4
    18c2:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,ISC11);
    18c4:	a5 e5       	ldi	r26, 0x55	; 85
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e5 e5       	ldi	r30, 0x55	; 85
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	87 7f       	andi	r24, 0xF7	; 247
    18d0:	8c 93       	st	X, r24
		break;
	}
} 
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <EXT2_MOOD>:


void EXT2_MOOD(u8 LOC_u8SenseControl)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <EXT2_MOOD+0x6>
    18e4:	0f 92       	push	r0
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	89 83       	std	Y+1, r24	; 0x01
	switch (LOC_u8SenseControl)   
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	3b 83       	std	Y+3, r19	; 0x03
    18f4:	2a 83       	std	Y+2, r18	; 0x02
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	9b 81       	ldd	r25, Y+3	; 0x03
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	31 f0       	breq	.+12     	; 0x190a <EXT2_MOOD+0x2c>
    18fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1900:	3b 81       	ldd	r19, Y+3	; 0x03
    1902:	21 30       	cpi	r18, 0x01	; 1
    1904:	31 05       	cpc	r19, r1
    1906:	49 f0       	breq	.+18     	; 0x191a <EXT2_MOOD+0x3c>
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <EXT2_MOOD+0x4a>
	{        
		case Falling_edge:
		CLR_BIT(MCUCSR,ISC2);
    190a:	a4 e5       	ldi	r26, 0x54	; 84
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e4 e5       	ldi	r30, 0x54	; 84
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	8f 7b       	andi	r24, 0xBF	; 191
    1916:	8c 93       	st	X, r24
    1918:	07 c0       	rjmp	.+14     	; 0x1928 <EXT2_MOOD+0x4a>
		break;
		case Rising_edge :
		SET_BIT(MCUCSR,ISC2);
    191a:	a4 e5       	ldi	r26, 0x54	; 84
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e4 e5       	ldi	r30, 0x54	; 84
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	80 64       	ori	r24, 0x40	; 64
    1926:	8c 93       	st	X, r24
		break;
	}
}    
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <DIO_VidSetPinDirection>:
#include"DIO_Config.h"



void DIO_VidSetPinDirection(u8 LOC_u8Port,u8 LOC_u8Pin,u8 LOC_u8Status)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	29 97       	sbiw	r28, 0x09	; 9
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	6a 83       	std	Y+2, r22	; 0x02
    194c:	4b 83       	std	Y+3, r20	; 0x03
	switch(LOC_u8Status)
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	39 87       	std	Y+9, r19	; 0x09
    1956:	28 87       	std	Y+8, r18	; 0x08
    1958:	88 85       	ldd	r24, Y+8	; 0x08
    195a:	99 85       	ldd	r25, Y+9	; 0x09
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	09 f4       	brne	.+2      	; 0x1962 <DIO_VidSetPinDirection+0x2e>
    1960:	75 c0       	rjmp	.+234    	; 0x1a4c <DIO_VidSetPinDirection+0x118>
    1962:	28 85       	ldd	r18, Y+8	; 0x08
    1964:	39 85       	ldd	r19, Y+9	; 0x09
    1966:	21 30       	cpi	r18, 0x01	; 1
    1968:	31 05       	cpc	r19, r1
    196a:	09 f0       	breq	.+2      	; 0x196e <DIO_VidSetPinDirection+0x3a>
    196c:	e2 c0       	rjmp	.+452    	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
	{
		case OUTPUT:
		switch(LOC_u8Port)
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	3f 83       	std	Y+7, r19	; 0x07
    1976:	2e 83       	std	Y+6, r18	; 0x06
    1978:	8e 81       	ldd	r24, Y+6	; 0x06
    197a:	9f 81       	ldd	r25, Y+7	; 0x07
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	91 05       	cpc	r25, r1
    1980:	49 f1       	breq	.+82     	; 0x19d4 <DIO_VidSetPinDirection+0xa0>
    1982:	2e 81       	ldd	r18, Y+6	; 0x06
    1984:	3f 81       	ldd	r19, Y+7	; 0x07
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	2c f4       	brge	.+10     	; 0x1996 <DIO_VidSetPinDirection+0x62>
    198c:	8e 81       	ldd	r24, Y+6	; 0x06
    198e:	9f 81       	ldd	r25, Y+7	; 0x07
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	61 f0       	breq	.+24     	; 0x19ac <DIO_VidSetPinDirection+0x78>
    1994:	ce c0       	rjmp	.+412    	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
    1996:	2e 81       	ldd	r18, Y+6	; 0x06
    1998:	3f 81       	ldd	r19, Y+7	; 0x07
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	71 f1       	breq	.+92     	; 0x19fc <DIO_VidSetPinDirection+0xc8>
    19a0:	8e 81       	ldd	r24, Y+6	; 0x06
    19a2:	9f 81       	ldd	r25, Y+7	; 0x07
    19a4:	83 30       	cpi	r24, 0x03	; 3
    19a6:	91 05       	cpc	r25, r1
    19a8:	e9 f1       	breq	.+122    	; 0x1a24 <DIO_VidSetPinDirection+0xf0>
    19aa:	c3 c0       	rjmp	.+390    	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
		{
			case DIO_PORTA:SET_BIT(DDRA,LOC_u8Pin);
    19ac:	aa e3       	ldi	r26, 0x3A	; 58
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ea e3       	ldi	r30, 0x3A	; 58
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	48 2f       	mov	r20, r24
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	02 2e       	mov	r0, r18
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <DIO_VidSetPinDirection+0x96>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	0a 94       	dec	r0
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <DIO_VidSetPinDirection+0x92>
    19ce:	84 2b       	or	r24, r20
    19d0:	8c 93       	st	X, r24
    19d2:	af c0       	rjmp	.+350    	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
			break;                 
			case DIO_PORTB:SET_BIT(DDRB,LOC_u8Pin);
    19d4:	a7 e3       	ldi	r26, 0x37	; 55
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e7 e3       	ldi	r30, 0x37	; 55
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <DIO_VidSetPinDirection+0xbe>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <DIO_VidSetPinDirection+0xba>
    19f6:	84 2b       	or	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	9b c0       	rjmp	.+310    	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
			break;                
			case DIO_PORTC:SET_BIT(DDRC,LOC_u8Pin);
    19fc:	a4 e3       	ldi	r26, 0x34	; 52
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e4 e3       	ldi	r30, 0x34	; 52
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <DIO_VidSetPinDirection+0xe6>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <DIO_VidSetPinDirection+0xe2>
    1a1e:	84 2b       	or	r24, r20
    1a20:	8c 93       	st	X, r24
    1a22:	87 c0       	rjmp	.+270    	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
			break;                 
			case DIO_PORTD:SET_BIT(DDRD,LOC_u8Pin);
    1a24:	a1 e3       	ldi	r26, 0x31	; 49
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e1 e3       	ldi	r30, 0x31	; 49
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	48 2f       	mov	r20, r24
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	02 2e       	mov	r0, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <DIO_VidSetPinDirection+0x10e>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	0a 94       	dec	r0
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <DIO_VidSetPinDirection+0x10a>
    1a46:	84 2b       	or	r24, r20
    1a48:	8c 93       	st	X, r24
    1a4a:	73 c0       	rjmp	.+230    	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
			break;
		}
		break;
		case INPUT:
	   switch(LOC_u8Port)
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	3d 83       	std	Y+5, r19	; 0x05
    1a54:	2c 83       	std	Y+4, r18	; 0x04
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	59 f1       	breq	.+86     	; 0x1ab6 <DIO_VidSetPinDirection+0x182>
    1a60:	2c 81       	ldd	r18, Y+4	; 0x04
    1a62:	3d 81       	ldd	r19, Y+5	; 0x05
    1a64:	22 30       	cpi	r18, 0x02	; 2
    1a66:	31 05       	cpc	r19, r1
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <DIO_VidSetPinDirection+0x140>
    1a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	69 f0       	breq	.+26     	; 0x1a8c <DIO_VidSetPinDirection+0x158>
    1a72:	5f c0       	rjmp	.+190    	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
    1a74:	2c 81       	ldd	r18, Y+4	; 0x04
    1a76:	3d 81       	ldd	r19, Y+5	; 0x05
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	89 f1       	breq	.+98     	; 0x1ae0 <DIO_VidSetPinDirection+0x1ac>
    1a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a80:	9d 81       	ldd	r25, Y+5	; 0x05
    1a82:	83 30       	cpi	r24, 0x03	; 3
    1a84:	91 05       	cpc	r25, r1
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <DIO_VidSetPinDirection+0x156>
    1a88:	40 c0       	rjmp	.+128    	; 0x1b0a <DIO_VidSetPinDirection+0x1d6>
    1a8a:	53 c0       	rjmp	.+166    	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
       {
        	case DIO_PORTA:CLR_BIT(DDRA,LOC_u8Pin);
    1a8c:	aa e3       	ldi	r26, 0x3A	; 58
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	ea e3       	ldi	r30, 0x3A	; 58
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <DIO_VidSetPinDirection+0x176>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <DIO_VidSetPinDirection+0x172>
    1aae:	80 95       	com	r24
    1ab0:	84 23       	and	r24, r20
    1ab2:	8c 93       	st	X, r24
    1ab4:	3e c0       	rjmp	.+124    	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
        	break;                 
        	case DIO_PORTB:CLR_BIT(DDRB,LOC_u8Pin);
    1ab6:	a7 e3       	ldi	r26, 0x37	; 55
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e7 e3       	ldi	r30, 0x37	; 55
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 2e       	mov	r0, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <DIO_VidSetPinDirection+0x1a0>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <DIO_VidSetPinDirection+0x19c>
    1ad8:	80 95       	com	r24
    1ada:	84 23       	and	r24, r20
    1adc:	8c 93       	st	X, r24
    1ade:	29 c0       	rjmp	.+82     	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
        	break;                
        	case DIO_PORTC:CLR_BIT(DDRC,LOC_u8Pin);
    1ae0:	a4 e3       	ldi	r26, 0x34	; 52
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e4 e3       	ldi	r30, 0x34	; 52
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	48 2f       	mov	r20, r24
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 2e       	mov	r0, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <DIO_VidSetPinDirection+0x1ca>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	0a 94       	dec	r0
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <DIO_VidSetPinDirection+0x1c6>
    1b02:	80 95       	com	r24
    1b04:	84 23       	and	r24, r20
    1b06:	8c 93       	st	X, r24
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <DIO_VidSetPinDirection+0x1fe>
        	break;                 
        	case DIO_PORTD:CLR_BIT(DDRD,LOC_u8Pin);
    1b0a:	a1 e3       	ldi	r26, 0x31	; 49
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e1 e3       	ldi	r30, 0x31	; 49
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	48 2f       	mov	r20, r24
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <DIO_VidSetPinDirection+0x1f4>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <DIO_VidSetPinDirection+0x1f0>
    1b2c:	80 95       	com	r24
    1b2e:	84 23       	and	r24, r20
    1b30:	8c 93       	st	X, r24
        	break;
        }
        break;
	}
}
    1b32:	29 96       	adiw	r28, 0x09	; 9
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection(u8 LOC_u8Port,u8 LOC_u8Status,u8 LOC_u8Value)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <DIO_VidSetPortDirection+0x6>
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <DIO_VidSetPortDirection+0x8>
    1b4c:	0f 92       	push	r0
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	6a 83       	std	Y+2, r22	; 0x02
    1b56:	4b 83       	std	Y+3, r20	; 0x03
	
    	switch(LOC_u8Port)
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	3d 83       	std	Y+5, r19	; 0x05
    1b60:	2c 83       	std	Y+4, r18	; 0x04
    1b62:	8c 81       	ldd	r24, Y+4	; 0x04
    1b64:	9d 81       	ldd	r25, Y+5	; 0x05
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	91 05       	cpc	r25, r1
    1b6a:	d1 f0       	breq	.+52     	; 0x1ba0 <DIO_VidSetPortDirection+0x5c>
    1b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b70:	22 30       	cpi	r18, 0x02	; 2
    1b72:	31 05       	cpc	r19, r1
    1b74:	2c f4       	brge	.+10     	; 0x1b80 <DIO_VidSetPortDirection+0x3c>
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	61 f0       	breq	.+24     	; 0x1b96 <DIO_VidSetPortDirection+0x52>
    1b7e:	1e c0       	rjmp	.+60     	; 0x1bbc <DIO_VidSetPortDirection+0x78>
    1b80:	2c 81       	ldd	r18, Y+4	; 0x04
    1b82:	3d 81       	ldd	r19, Y+5	; 0x05
    1b84:	22 30       	cpi	r18, 0x02	; 2
    1b86:	31 05       	cpc	r19, r1
    1b88:	81 f0       	breq	.+32     	; 0x1baa <DIO_VidSetPortDirection+0x66>
    1b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8e:	83 30       	cpi	r24, 0x03	; 3
    1b90:	91 05       	cpc	r25, r1
    1b92:	81 f0       	breq	.+32     	; 0x1bb4 <DIO_VidSetPortDirection+0x70>
    1b94:	13 c0       	rjmp	.+38     	; 0x1bbc <DIO_VidSetPortDirection+0x78>
    	{
    		case DIO_PORTA:DDRA=LOC_u8Value;
    1b96:	ea e3       	ldi	r30, 0x3A	; 58
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	80 83       	st	Z, r24
    1b9e:	0e c0       	rjmp	.+28     	; 0x1bbc <DIO_VidSetPortDirection+0x78>
    		break;                 
    		case DIO_PORTB:DDRB=LOC_u8Value;
    1ba0:	e7 e3       	ldi	r30, 0x37	; 55
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	80 83       	st	Z, r24
    1ba8:	09 c0       	rjmp	.+18     	; 0x1bbc <DIO_VidSetPortDirection+0x78>
    		break;                
    		case DIO_PORTC:DDRC=LOC_u8Value;
    1baa:	e4 e3       	ldi	r30, 0x34	; 52
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	80 83       	st	Z, r24
    1bb2:	04 c0       	rjmp	.+8      	; 0x1bbc <DIO_VidSetPortDirection+0x78>
    		break;                 
    		case DIO_PORTD:DDRD=LOC_u8Value;
    1bb4:	e1 e3       	ldi	r30, 0x31	; 49
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	80 83       	st	Z, r24
    		break;
    	}
    	
}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <DIO_VidSetPinValue>:

void DIO_VidSetPinValue (u8 LOC_u8Port,u8 LOC_u8Pin,u8 LOC_u8Status)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	29 97       	sbiw	r28, 0x09	; 9
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	6a 83       	std	Y+2, r22	; 0x02
    1be4:	4b 83       	std	Y+3, r20	; 0x03
	switch(LOC_u8Status)
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	39 87       	std	Y+9, r19	; 0x09
    1bee:	28 87       	std	Y+8, r18	; 0x08
    1bf0:	88 85       	ldd	r24, Y+8	; 0x08
    1bf2:	99 85       	ldd	r25, Y+9	; 0x09
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <DIO_VidSetPinValue+0x2e>
    1bf8:	75 c0       	rjmp	.+234    	; 0x1ce4 <DIO_VidSetPinValue+0x118>
    1bfa:	28 85       	ldd	r18, Y+8	; 0x08
    1bfc:	39 85       	ldd	r19, Y+9	; 0x09
    1bfe:	21 30       	cpi	r18, 0x01	; 1
    1c00:	31 05       	cpc	r19, r1
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <DIO_VidSetPinValue+0x3a>
    1c04:	e2 c0       	rjmp	.+452    	; 0x1dca <DIO_VidSetPinValue+0x1fe>
	{
		case HIGH:
		switch(LOC_u8Port)
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	3f 83       	std	Y+7, r19	; 0x07
    1c0e:	2e 83       	std	Y+6, r18	; 0x06
    1c10:	8e 81       	ldd	r24, Y+6	; 0x06
    1c12:	9f 81       	ldd	r25, Y+7	; 0x07
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	91 05       	cpc	r25, r1
    1c18:	49 f1       	breq	.+82     	; 0x1c6c <DIO_VidSetPinValue+0xa0>
    1c1a:	2e 81       	ldd	r18, Y+6	; 0x06
    1c1c:	3f 81       	ldd	r19, Y+7	; 0x07
    1c1e:	22 30       	cpi	r18, 0x02	; 2
    1c20:	31 05       	cpc	r19, r1
    1c22:	2c f4       	brge	.+10     	; 0x1c2e <DIO_VidSetPinValue+0x62>
    1c24:	8e 81       	ldd	r24, Y+6	; 0x06
    1c26:	9f 81       	ldd	r25, Y+7	; 0x07
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	61 f0       	breq	.+24     	; 0x1c44 <DIO_VidSetPinValue+0x78>
    1c2c:	ce c0       	rjmp	.+412    	; 0x1dca <DIO_VidSetPinValue+0x1fe>
    1c2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c30:	3f 81       	ldd	r19, Y+7	; 0x07
    1c32:	22 30       	cpi	r18, 0x02	; 2
    1c34:	31 05       	cpc	r19, r1
    1c36:	71 f1       	breq	.+92     	; 0x1c94 <DIO_VidSetPinValue+0xc8>
    1c38:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3c:	83 30       	cpi	r24, 0x03	; 3
    1c3e:	91 05       	cpc	r25, r1
    1c40:	e9 f1       	breq	.+122    	; 0x1cbc <DIO_VidSetPinValue+0xf0>
    1c42:	c3 c0       	rjmp	.+390    	; 0x1dca <DIO_VidSetPinValue+0x1fe>
		{
			case DIO_PORTA:SET_BIT(PORTA,LOC_u8Pin);
    1c44:	ab e3       	ldi	r26, 0x3B	; 59
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	eb e3       	ldi	r30, 0x3B	; 59
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 2e       	mov	r0, r18
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <DIO_VidSetPinValue+0x96>
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	0a 94       	dec	r0
    1c64:	e2 f7       	brpl	.-8      	; 0x1c5e <DIO_VidSetPinValue+0x92>
    1c66:	84 2b       	or	r24, r20
    1c68:	8c 93       	st	X, r24
    1c6a:	af c0       	rjmp	.+350    	; 0x1dca <DIO_VidSetPinValue+0x1fe>
			break;                 
			case DIO_PORTB:SET_BIT(PORTB,LOC_u8Pin);
    1c6c:	a8 e3       	ldi	r26, 0x38	; 56
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e8 e3       	ldi	r30, 0x38	; 56
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	48 2f       	mov	r20, r24
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 2e       	mov	r0, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_VidSetPinValue+0xbe>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	0a 94       	dec	r0
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <DIO_VidSetPinValue+0xba>
    1c8e:	84 2b       	or	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	9b c0       	rjmp	.+310    	; 0x1dca <DIO_VidSetPinValue+0x1fe>
			break;                
			case DIO_PORTC:SET_BIT(PORTC,LOC_u8Pin);
    1c94:	a5 e3       	ldi	r26, 0x35	; 53
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e5 e3       	ldi	r30, 0x35	; 53
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <DIO_VidSetPinValue+0xe6>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <DIO_VidSetPinValue+0xe2>
    1cb6:	84 2b       	or	r24, r20
    1cb8:	8c 93       	st	X, r24
    1cba:	87 c0       	rjmp	.+270    	; 0x1dca <DIO_VidSetPinValue+0x1fe>
			break;                 
			case DIO_PORTD:SET_BIT(PORTD,LOC_u8Pin);
    1cbc:	a2 e3       	ldi	r26, 0x32	; 50
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e2 e3       	ldi	r30, 0x32	; 50
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <DIO_VidSetPinValue+0x10e>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <DIO_VidSetPinValue+0x10a>
    1cde:	84 2b       	or	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	73 c0       	rjmp	.+230    	; 0x1dca <DIO_VidSetPinValue+0x1fe>
			break;
		}
		break;
		case LOW:
	   switch(LOC_u8Port)
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	3d 83       	std	Y+5, r19	; 0x05
    1cec:	2c 83       	std	Y+4, r18	; 0x04
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	59 f1       	breq	.+86     	; 0x1d4e <DIO_VidSetPinValue+0x182>
    1cf8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <DIO_VidSetPinValue+0x140>
    1d02:	8c 81       	ldd	r24, Y+4	; 0x04
    1d04:	9d 81       	ldd	r25, Y+5	; 0x05
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f0       	breq	.+26     	; 0x1d24 <DIO_VidSetPinValue+0x158>
    1d0a:	5f c0       	rjmp	.+190    	; 0x1dca <DIO_VidSetPinValue+0x1fe>
    1d0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	89 f1       	breq	.+98     	; 0x1d78 <DIO_VidSetPinValue+0x1ac>
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <DIO_VidSetPinValue+0x156>
    1d20:	40 c0       	rjmp	.+128    	; 0x1da2 <DIO_VidSetPinValue+0x1d6>
    1d22:	53 c0       	rjmp	.+166    	; 0x1dca <DIO_VidSetPinValue+0x1fe>
       {
        	case DIO_PORTA:CLR_BIT(PORTA,LOC_u8Pin);
    1d24:	ab e3       	ldi	r26, 0x3B	; 59
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	eb e3       	ldi	r30, 0x3B	; 59
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	48 2f       	mov	r20, r24
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	02 2e       	mov	r0, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <DIO_VidSetPinValue+0x176>
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	0a 94       	dec	r0
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <DIO_VidSetPinValue+0x172>
    1d46:	80 95       	com	r24
    1d48:	84 23       	and	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	3e c0       	rjmp	.+124    	; 0x1dca <DIO_VidSetPinValue+0x1fe>
        	break;                 
        	case DIO_PORTB:CLR_BIT(PORTB,LOC_u8Pin);
    1d4e:	a8 e3       	ldi	r26, 0x38	; 56
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e8 e3       	ldi	r30, 0x38	; 56
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <DIO_VidSetPinValue+0x1a0>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <DIO_VidSetPinValue+0x19c>
    1d70:	80 95       	com	r24
    1d72:	84 23       	and	r24, r20
    1d74:	8c 93       	st	X, r24
    1d76:	29 c0       	rjmp	.+82     	; 0x1dca <DIO_VidSetPinValue+0x1fe>
        	break;                
        	case DIO_PORTC:CLR_BIT(PORTC,LOC_u8Pin);
    1d78:	a5 e3       	ldi	r26, 0x35	; 53
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e5 e3       	ldi	r30, 0x35	; 53
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	48 2f       	mov	r20, r24
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	02 2e       	mov	r0, r18
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <DIO_VidSetPinValue+0x1ca>
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	0a 94       	dec	r0
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <DIO_VidSetPinValue+0x1c6>
    1d9a:	80 95       	com	r24
    1d9c:	84 23       	and	r24, r20
    1d9e:	8c 93       	st	X, r24
    1da0:	14 c0       	rjmp	.+40     	; 0x1dca <DIO_VidSetPinValue+0x1fe>
        	break;                 
        	case DIO_PORTD:CLR_BIT(PORTD,LOC_u8Pin);
    1da2:	a2 e3       	ldi	r26, 0x32	; 50
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e2 e3       	ldi	r30, 0x32	; 50
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <DIO_VidSetPinValue+0x1f4>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <DIO_VidSetPinValue+0x1f0>
    1dc4:	80 95       	com	r24
    1dc6:	84 23       	and	r24, r20
    1dc8:	8c 93       	st	X, r24
        	break;
        }
        break;
	}
}
    1dca:	29 96       	adiw	r28, 0x09	; 9
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <DIO_VidSetPortValue>:

void DIO_VidSetPortValue(u8 LOC_u8Port,u8 LOC_u8Value)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <DIO_VidSetPortValue+0x6>
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <DIO_VidSetPortValue+0x8>
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	3c 83       	std	Y+4, r19	; 0x04
    1df4:	2b 83       	std	Y+3, r18	; 0x03
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	d1 f0       	breq	.+52     	; 0x1e34 <DIO_VidSetPortValue+0x58>
    1e00:	2b 81       	ldd	r18, Y+3	; 0x03
    1e02:	3c 81       	ldd	r19, Y+4	; 0x04
    1e04:	22 30       	cpi	r18, 0x02	; 2
    1e06:	31 05       	cpc	r19, r1
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <DIO_VidSetPortValue+0x38>
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	61 f0       	breq	.+24     	; 0x1e2a <DIO_VidSetPortValue+0x4e>
    1e12:	1e c0       	rjmp	.+60     	; 0x1e50 <DIO_VidSetPortValue+0x74>
    1e14:	2b 81       	ldd	r18, Y+3	; 0x03
    1e16:	3c 81       	ldd	r19, Y+4	; 0x04
    1e18:	22 30       	cpi	r18, 0x02	; 2
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	81 f0       	breq	.+32     	; 0x1e3e <DIO_VidSetPortValue+0x62>
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	83 30       	cpi	r24, 0x03	; 3
    1e24:	91 05       	cpc	r25, r1
    1e26:	81 f0       	breq	.+32     	; 0x1e48 <DIO_VidSetPortValue+0x6c>
    1e28:	13 c0       	rjmp	.+38     	; 0x1e50 <DIO_VidSetPortValue+0x74>
    	{
    		case DIO_PORTA:PORTA=LOC_u8Value;
    1e2a:	eb e3       	ldi	r30, 0x3B	; 59
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	80 83       	st	Z, r24
    1e32:	0e c0       	rjmp	.+28     	; 0x1e50 <DIO_VidSetPortValue+0x74>
    		break;                 
    		case DIO_PORTB:PORTB=LOC_u8Value;
    1e34:	e8 e3       	ldi	r30, 0x38	; 56
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	80 83       	st	Z, r24
    1e3c:	09 c0       	rjmp	.+18     	; 0x1e50 <DIO_VidSetPortValue+0x74>
    		break;                
    		case DIO_PORTC:PORTC=LOC_u8Value;
    1e3e:	e5 e3       	ldi	r30, 0x35	; 53
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	80 83       	st	Z, r24
    1e46:	04 c0       	rjmp	.+8      	; 0x1e50 <DIO_VidSetPortValue+0x74>
    		break;                 
    		case DIO_PORTD:PORTD=LOC_u8Value;
    1e48:	e2 e3       	ldi	r30, 0x32	; 50
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	80 83       	st	Z, r24
    		break;
    	}
}
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <DIO_u8GetPinValue+0x6>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <DIO_u8GetPinValue+0x8>
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	8a 83       	std	Y+2, r24	; 0x02
    1e6e:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch(LOC_u8Port)
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	3d 83       	std	Y+5, r19	; 0x05
    1e78:	2c 83       	std	Y+4, r18	; 0x04
    1e7a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e7c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e7e:	41 30       	cpi	r20, 0x01	; 1
    1e80:	51 05       	cpc	r21, r1
    1e82:	41 f1       	breq	.+80     	; 0x1ed4 <DIO_u8GetPinValue+0x76>
    1e84:	8c 81       	ldd	r24, Y+4	; 0x04
    1e86:	9d 81       	ldd	r25, Y+5	; 0x05
    1e88:	82 30       	cpi	r24, 0x02	; 2
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	34 f4       	brge	.+12     	; 0x1e9a <DIO_u8GetPinValue+0x3c>
    1e8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e90:	3d 81       	ldd	r19, Y+5	; 0x05
    1e92:	21 15       	cp	r18, r1
    1e94:	31 05       	cpc	r19, r1
    1e96:	61 f0       	breq	.+24     	; 0x1eb0 <DIO_u8GetPinValue+0x52>
    1e98:	52 c0       	rjmp	.+164    	; 0x1f3e <DIO_u8GetPinValue+0xe0>
    1e9a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e9c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e9e:	42 30       	cpi	r20, 0x02	; 2
    1ea0:	51 05       	cpc	r21, r1
    1ea2:	51 f1       	breq	.+84     	; 0x1ef8 <DIO_u8GetPinValue+0x9a>
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	91 05       	cpc	r25, r1
    1eac:	b9 f1       	breq	.+110    	; 0x1f1c <DIO_u8GetPinValue+0xbe>
    1eae:	47 c0       	rjmp	.+142    	; 0x1f3e <DIO_u8GetPinValue+0xe0>
    	{
    		case DIO_PORTA:value=GET_BIT(PINA,LOC_u8Pin);
    1eb0:	e9 e3       	ldi	r30, 0x39	; 57
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	88 2f       	mov	r24, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a9 01       	movw	r20, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <DIO_u8GetPinValue+0x6a>
    1ec4:	55 95       	asr	r21
    1ec6:	47 95       	ror	r20
    1ec8:	8a 95       	dec	r24
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <DIO_u8GetPinValue+0x66>
    1ecc:	ca 01       	movw	r24, r20
    1ece:	81 70       	andi	r24, 0x01	; 1
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	35 c0       	rjmp	.+106    	; 0x1f3e <DIO_u8GetPinValue+0xe0>
    		break;                 
    		case DIO_PORTB:value=GET_BIT(PINB,LOC_u8Pin);
    1ed4:	e6 e3       	ldi	r30, 0x36	; 54
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	88 2f       	mov	r24, r24
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a9 01       	movw	r20, r18
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <DIO_u8GetPinValue+0x8e>
    1ee8:	55 95       	asr	r21
    1eea:	47 95       	ror	r20
    1eec:	8a 95       	dec	r24
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <DIO_u8GetPinValue+0x8a>
    1ef0:	ca 01       	movw	r24, r20
    1ef2:	81 70       	andi	r24, 0x01	; 1
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	23 c0       	rjmp	.+70     	; 0x1f3e <DIO_u8GetPinValue+0xe0>
    		break;                
    		case DIO_PORTC:value=GET_BIT(PINC,LOC_u8Pin);
    1ef8:	e3 e3       	ldi	r30, 0x33	; 51
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	a9 01       	movw	r20, r18
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <DIO_u8GetPinValue+0xb2>
    1f0c:	55 95       	asr	r21
    1f0e:	47 95       	ror	r20
    1f10:	8a 95       	dec	r24
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <DIO_u8GetPinValue+0xae>
    1f14:	ca 01       	movw	r24, r20
    1f16:	81 70       	andi	r24, 0x01	; 1
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	11 c0       	rjmp	.+34     	; 0x1f3e <DIO_u8GetPinValue+0xe0>
    		break;                 
    		case DIO_PORTD:value=GET_BIT(PIND,LOC_u8Pin);
    1f1c:	e0 e3       	ldi	r30, 0x30	; 48
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	88 2f       	mov	r24, r24
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a9 01       	movw	r20, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <DIO_u8GetPinValue+0xd6>
    1f30:	55 95       	asr	r21
    1f32:	47 95       	ror	r20
    1f34:	8a 95       	dec	r24
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <DIO_u8GetPinValue+0xd2>
    1f38:	ca 01       	movw	r24, r20
    1f3a:	81 70       	andi	r24, 0x01	; 1
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    		break;
    	}
		return value;
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <DIO_VidTogglePin>:

void DIO_VidTogglePin(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <DIO_VidTogglePin+0x6>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <DIO_VidTogglePin+0x8>
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	3c 83       	std	Y+4, r19	; 0x04
    1f68:	2b 83       	std	Y+3, r18	; 0x03
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	91 05       	cpc	r25, r1
    1f72:	49 f1       	breq	.+82     	; 0x1fc6 <DIO_VidTogglePin+0x76>
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	22 30       	cpi	r18, 0x02	; 2
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	2c f4       	brge	.+10     	; 0x1f88 <DIO_VidTogglePin+0x38>
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <DIO_VidTogglePin+0x4e>
    1f86:	5a c0       	rjmp	.+180    	; 0x203c <DIO_VidTogglePin+0xec>
    1f88:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8c:	22 30       	cpi	r18, 0x02	; 2
    1f8e:	31 05       	cpc	r19, r1
    1f90:	71 f1       	breq	.+92     	; 0x1fee <DIO_VidTogglePin+0x9e>
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	83 30       	cpi	r24, 0x03	; 3
    1f98:	91 05       	cpc	r25, r1
    1f9a:	e9 f1       	breq	.+122    	; 0x2016 <DIO_VidTogglePin+0xc6>
    1f9c:	4f c0       	rjmp	.+158    	; 0x203c <DIO_VidTogglePin+0xec>
    	{
    		case DIO_PORTA:TOG_BIT(PORTA,LOC_u8Pin);
    1f9e:	ab e3       	ldi	r26, 0x3B	; 59
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	eb e3       	ldi	r30, 0x3B	; 59
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	48 2f       	mov	r20, r24
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	02 2e       	mov	r0, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <DIO_VidTogglePin+0x6c>
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	0a 94       	dec	r0
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <DIO_VidTogglePin+0x68>
    1fc0:	84 27       	eor	r24, r20
    1fc2:	8c 93       	st	X, r24
    1fc4:	3b c0       	rjmp	.+118    	; 0x203c <DIO_VidTogglePin+0xec>
    		break;           
    		case DIO_PORTB:TOG_BIT(PORTB,LOC_u8Pin);
    1fc6:	a8 e3       	ldi	r26, 0x38	; 56
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e8 e3       	ldi	r30, 0x38	; 56
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	48 2f       	mov	r20, r24
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	02 2e       	mov	r0, r18
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <DIO_VidTogglePin+0x94>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	0a 94       	dec	r0
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <DIO_VidTogglePin+0x90>
    1fe8:	84 27       	eor	r24, r20
    1fea:	8c 93       	st	X, r24
    1fec:	27 c0       	rjmp	.+78     	; 0x203c <DIO_VidTogglePin+0xec>
    		break;          
    		case DIO_PORTC:TOG_BIT(PORTC,LOC_u8Pin);
    1fee:	a5 e3       	ldi	r26, 0x35	; 53
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e5 e3       	ldi	r30, 0x35	; 53
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	48 2f       	mov	r20, r24
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	02 2e       	mov	r0, r18
    2006:	02 c0       	rjmp	.+4      	; 0x200c <DIO_VidTogglePin+0xbc>
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	0a 94       	dec	r0
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <DIO_VidTogglePin+0xb8>
    2010:	84 27       	eor	r24, r20
    2012:	8c 93       	st	X, r24
    2014:	13 c0       	rjmp	.+38     	; 0x203c <DIO_VidTogglePin+0xec>
    		break;           
    		case DIO_PORTD:TOG_BIT(PORTD,LOC_u8Pin);
    2016:	a2 e3       	ldi	r26, 0x32	; 50
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e2 e3       	ldi	r30, 0x32	; 50
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	48 2f       	mov	r20, r24
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	02 2e       	mov	r0, r18
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <DIO_VidTogglePin+0xe4>
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	0a 94       	dec	r0
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <DIO_VidTogglePin+0xe0>
    2038:	84 27       	eor	r24, r20
    203a:	8c 93       	st	X, r24
    		break;
    	}
}
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <LCD_VidIntilaization_8bit>:




void LCD_VidIntilaization_8bit(void)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	e8 97       	sbiw	r28, 0x38	; 56
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a8 e4       	ldi	r26, 0x48	; 72
    2064:	b2 e4       	ldi	r27, 0x42	; 66
    2066:	8d ab       	std	Y+53, r24	; 0x35
    2068:	9e ab       	std	Y+54, r25	; 0x36
    206a:	af ab       	std	Y+55, r26	; 0x37
    206c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206e:	6d a9       	ldd	r22, Y+53	; 0x35
    2070:	7e a9       	ldd	r23, Y+54	; 0x36
    2072:	8f a9       	ldd	r24, Y+55	; 0x37
    2074:	98 ad       	ldd	r25, Y+56	; 0x38
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	4a ef       	ldi	r20, 0xFA	; 250
    207c:	54 e4       	ldi	r21, 0x44	; 68
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	89 ab       	std	Y+49, r24	; 0x31
    2088:	9a ab       	std	Y+50, r25	; 0x32
    208a:	ab ab       	std	Y+51, r26	; 0x33
    208c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    208e:	69 a9       	ldd	r22, Y+49	; 0x31
    2090:	7a a9       	ldd	r23, Y+50	; 0x32
    2092:	8b a9       	ldd	r24, Y+51	; 0x33
    2094:	9c a9       	ldd	r25, Y+52	; 0x34
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5f e3       	ldi	r21, 0x3F	; 63
    209e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    20a2:	88 23       	and	r24, r24
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <LCD_VidIntilaization_8bit+0x66>
		__ticks = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	98 ab       	std	Y+48, r25	; 0x30
    20ac:	8f a7       	std	Y+47, r24	; 0x2f
    20ae:	3f c0       	rjmp	.+126    	; 0x212e <LCD_VidIntilaization_8bit+0xe4>
	else if (__tmp > 65535)
    20b0:	69 a9       	ldd	r22, Y+49	; 0x31
    20b2:	7a a9       	ldd	r23, Y+50	; 0x32
    20b4:	8b a9       	ldd	r24, Y+51	; 0x33
    20b6:	9c a9       	ldd	r25, Y+52	; 0x34
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	3f ef       	ldi	r19, 0xFF	; 255
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	57 e4       	ldi	r21, 0x47	; 71
    20c0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	4c f5       	brge	.+82     	; 0x211a <LCD_VidIntilaization_8bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c8:	6d a9       	ldd	r22, Y+53	; 0x35
    20ca:	7e a9       	ldd	r23, Y+54	; 0x36
    20cc:	8f a9       	ldd	r24, Y+55	; 0x37
    20ce:	98 ad       	ldd	r25, Y+56	; 0x38
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e2       	ldi	r20, 0x20	; 32
    20d6:	51 e4       	ldi	r21, 0x41	; 65
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	98 ab       	std	Y+48, r25	; 0x30
    20ee:	8f a7       	std	Y+47, r24	; 0x2f
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <LCD_VidIntilaization_8bit+0xc6>
    20f2:	88 ec       	ldi	r24, 0xC8	; 200
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9e a7       	std	Y+46, r25	; 0x2e
    20f8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    20fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_VidIntilaization_8bit+0xb4>
    2102:	9e a7       	std	Y+46, r25	; 0x2e
    2104:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2106:	8f a5       	ldd	r24, Y+47	; 0x2f
    2108:	98 a9       	ldd	r25, Y+48	; 0x30
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	98 ab       	std	Y+48, r25	; 0x30
    210e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2110:	8f a5       	ldd	r24, Y+47	; 0x2f
    2112:	98 a9       	ldd	r25, Y+48	; 0x30
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	69 f7       	brne	.-38     	; 0x20f2 <LCD_VidIntilaization_8bit+0xa8>
    2118:	14 c0       	rjmp	.+40     	; 0x2142 <LCD_VidIntilaization_8bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211a:	69 a9       	ldd	r22, Y+49	; 0x31
    211c:	7a a9       	ldd	r23, Y+50	; 0x32
    211e:	8b a9       	ldd	r24, Y+51	; 0x33
    2120:	9c a9       	ldd	r25, Y+52	; 0x34
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	98 ab       	std	Y+48, r25	; 0x30
    212c:	8f a7       	std	Y+47, r24	; 0x2f
    212e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2130:	98 a9       	ldd	r25, Y+48	; 0x30
    2132:	9c a7       	std	Y+44, r25	; 0x2c
    2134:	8b a7       	std	Y+43, r24	; 0x2b
    2136:	8b a5       	ldd	r24, Y+43	; 0x2b
    2138:	9c a5       	ldd	r25, Y+44	; 0x2c
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_VidIntilaization_8bit+0xf0>
    213e:	9c a7       	std	Y+44, r25	; 0x2c
    2140:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	DIO_VidSetPortDirection(PORT_DATA ,0xFF);
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	6f ef       	ldi	r22, 0xFF	; 255
    2146:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(PORT_CONTROL,Pin_Control1,OUTPUT);
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	41 e0       	ldi	r20, 0x01	; 1
    2150:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORT_CONTROL,Pin_Control2,OUTPUT);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	61 e0       	ldi	r22, 0x01	; 1
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORT_CONTROL,Pin_Control3,OUTPUT);
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	62 e0       	ldi	r22, 0x02	; 2
    2162:	41 e0       	ldi	r20, 0x01	; 1
    2164:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_VidSetPinDirection>

	LCD_VidWriteCommand(0b00111000);  //Function set
    2168:	88 e3       	ldi	r24, 0x38	; 56
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_VidWriteCommand>
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	a0 e8       	ldi	r26, 0x80	; 128
    2176:	bf e3       	ldi	r27, 0x3F	; 63
    2178:	8f a3       	std	Y+39, r24	; 0x27
    217a:	98 a7       	std	Y+40, r25	; 0x28
    217c:	a9 a7       	std	Y+41, r26	; 0x29
    217e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2180:	6f a1       	ldd	r22, Y+39	; 0x27
    2182:	78 a5       	ldd	r23, Y+40	; 0x28
    2184:	89 a5       	ldd	r24, Y+41	; 0x29
    2186:	9a a5       	ldd	r25, Y+42	; 0x2a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4a ef       	ldi	r20, 0xFA	; 250
    218e:	54 e4       	ldi	r21, 0x44	; 68
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8b a3       	std	Y+35, r24	; 0x23
    219a:	9c a3       	std	Y+36, r25	; 0x24
    219c:	ad a3       	std	Y+37, r26	; 0x25
    219e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21a0:	6b a1       	ldd	r22, Y+35	; 0x23
    21a2:	7c a1       	ldd	r23, Y+36	; 0x24
    21a4:	8d a1       	ldd	r24, Y+37	; 0x25
    21a6:	9e a1       	ldd	r25, Y+38	; 0x26
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e8       	ldi	r20, 0x80	; 128
    21ae:	5f e3       	ldi	r21, 0x3F	; 63
    21b0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    21b4:	88 23       	and	r24, r24
    21b6:	2c f4       	brge	.+10     	; 0x21c2 <LCD_VidIntilaization_8bit+0x178>
		__ticks = 1;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9a a3       	std	Y+34, r25	; 0x22
    21be:	89 a3       	std	Y+33, r24	; 0x21
    21c0:	3f c0       	rjmp	.+126    	; 0x2240 <LCD_VidIntilaization_8bit+0x1f6>
	else if (__tmp > 65535)
    21c2:	6b a1       	ldd	r22, Y+35	; 0x23
    21c4:	7c a1       	ldd	r23, Y+36	; 0x24
    21c6:	8d a1       	ldd	r24, Y+37	; 0x25
    21c8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	3f ef       	ldi	r19, 0xFF	; 255
    21ce:	4f e7       	ldi	r20, 0x7F	; 127
    21d0:	57 e4       	ldi	r21, 0x47	; 71
    21d2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    21d6:	18 16       	cp	r1, r24
    21d8:	4c f5       	brge	.+82     	; 0x222c <LCD_VidIntilaization_8bit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21da:	6f a1       	ldd	r22, Y+39	; 0x27
    21dc:	78 a5       	ldd	r23, Y+40	; 0x28
    21de:	89 a5       	ldd	r24, Y+41	; 0x29
    21e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e2       	ldi	r20, 0x20	; 32
    21e8:	51 e4       	ldi	r21, 0x41	; 65
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9a a3       	std	Y+34, r25	; 0x22
    2200:	89 a3       	std	Y+33, r24	; 0x21
    2202:	0f c0       	rjmp	.+30     	; 0x2222 <LCD_VidIntilaization_8bit+0x1d8>
    2204:	88 ec       	ldi	r24, 0xC8	; 200
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	98 a3       	std	Y+32, r25	; 0x20
    220a:	8f 8f       	std	Y+31, r24	; 0x1f
    220c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    220e:	98 a1       	ldd	r25, Y+32	; 0x20
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_VidIntilaization_8bit+0x1c6>
    2214:	98 a3       	std	Y+32, r25	; 0x20
    2216:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2218:	89 a1       	ldd	r24, Y+33	; 0x21
    221a:	9a a1       	ldd	r25, Y+34	; 0x22
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	9a a3       	std	Y+34, r25	; 0x22
    2220:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2222:	89 a1       	ldd	r24, Y+33	; 0x21
    2224:	9a a1       	ldd	r25, Y+34	; 0x22
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	69 f7       	brne	.-38     	; 0x2204 <LCD_VidIntilaization_8bit+0x1ba>
    222a:	14 c0       	rjmp	.+40     	; 0x2254 <LCD_VidIntilaization_8bit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222c:	6b a1       	ldd	r22, Y+35	; 0x23
    222e:	7c a1       	ldd	r23, Y+36	; 0x24
    2230:	8d a1       	ldd	r24, Y+37	; 0x25
    2232:	9e a1       	ldd	r25, Y+38	; 0x26
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9a a3       	std	Y+34, r25	; 0x22
    223e:	89 a3       	std	Y+33, r24	; 0x21
    2240:	89 a1       	ldd	r24, Y+33	; 0x21
    2242:	9a a1       	ldd	r25, Y+34	; 0x22
    2244:	9e 8f       	std	Y+30, r25	; 0x1e
    2246:	8d 8f       	std	Y+29, r24	; 0x1d
    2248:	8d 8d       	ldd	r24, Y+29	; 0x1d
    224a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_VidIntilaization_8bit+0x202>
    2250:	9e 8f       	std	Y+30, r25	; 0x1e
    2252:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); 
	LCD_VidWriteCommand(0b00001100);  //Diplay_On
    2254:	8c e0       	ldi	r24, 0x0C	; 12
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_VidWriteCommand>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e8       	ldi	r26, 0x80	; 128
    2262:	bf e3       	ldi	r27, 0x3F	; 63
    2264:	89 8f       	std	Y+25, r24	; 0x19
    2266:	9a 8f       	std	Y+26, r25	; 0x1a
    2268:	ab 8f       	std	Y+27, r26	; 0x1b
    226a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	69 8d       	ldd	r22, Y+25	; 0x19
    226e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2270:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2272:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a ef       	ldi	r20, 0xFA	; 250
    227a:	54 e4       	ldi	r21, 0x44	; 68
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8d 8b       	std	Y+21, r24	; 0x15
    2286:	9e 8b       	std	Y+22, r25	; 0x16
    2288:	af 8b       	std	Y+23, r26	; 0x17
    228a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    228c:	6d 89       	ldd	r22, Y+21	; 0x15
    228e:	7e 89       	ldd	r23, Y+22	; 0x16
    2290:	8f 89       	ldd	r24, Y+23	; 0x17
    2292:	98 8d       	ldd	r25, Y+24	; 0x18
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <LCD_VidIntilaization_8bit+0x264>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <LCD_VidIntilaization_8bit+0x2e2>
	else if (__tmp > 65535)
    22ae:	6d 89       	ldd	r22, Y+21	; 0x15
    22b0:	7e 89       	ldd	r23, Y+22	; 0x16
    22b2:	8f 89       	ldd	r24, Y+23	; 0x17
    22b4:	98 8d       	ldd	r25, Y+24	; 0x18
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <LCD_VidIntilaization_8bit+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	69 8d       	ldd	r22, Y+25	; 0x19
    22c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9c 8b       	std	Y+20, r25	; 0x14
    22ec:	8b 8b       	std	Y+19, r24	; 0x13
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <LCD_VidIntilaization_8bit+0x2c4>
    22f0:	88 ec       	ldi	r24, 0xC8	; 200
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9a 8b       	std	Y+18, r25	; 0x12
    22f6:	89 8b       	std	Y+17, r24	; 0x11
    22f8:	89 89       	ldd	r24, Y+17	; 0x11
    22fa:	9a 89       	ldd	r25, Y+18	; 0x12
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_VidIntilaization_8bit+0x2b2>
    2300:	9a 8b       	std	Y+18, r25	; 0x12
    2302:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8b 89       	ldd	r24, Y+19	; 0x13
    2306:	9c 89       	ldd	r25, Y+20	; 0x14
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9c 8b       	std	Y+20, r25	; 0x14
    230c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8b 89       	ldd	r24, Y+19	; 0x13
    2310:	9c 89       	ldd	r25, Y+20	; 0x14
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <LCD_VidIntilaization_8bit+0x2a6>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <LCD_VidIntilaization_8bit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6d 89       	ldd	r22, Y+21	; 0x15
    231a:	7e 89       	ldd	r23, Y+22	; 0x16
    231c:	8f 89       	ldd	r24, Y+23	; 0x17
    231e:	98 8d       	ldd	r25, Y+24	; 0x18
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9c 8b       	std	Y+20, r25	; 0x14
    232a:	8b 8b       	std	Y+19, r24	; 0x13
    232c:	8b 89       	ldd	r24, Y+19	; 0x13
    232e:	9c 89       	ldd	r25, Y+20	; 0x14
    2330:	98 8b       	std	Y+16, r25	; 0x10
    2332:	8f 87       	std	Y+15, r24	; 0x0f
    2334:	8f 85       	ldd	r24, Y+15	; 0x0f
    2336:	98 89       	ldd	r25, Y+16	; 0x10
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_VidIntilaization_8bit+0x2ee>
    233c:	98 8b       	std	Y+16, r25	; 0x10
    233e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); 
	LCD_VidWriteCommand(0b00000001);  //Display_clear
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_VidWriteCommand>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a0 e0       	ldi	r26, 0x00	; 0
    234e:	b0 e4       	ldi	r27, 0x40	; 64
    2350:	8b 87       	std	Y+11, r24	; 0x0b
    2352:	9c 87       	std	Y+12, r25	; 0x0c
    2354:	ad 87       	std	Y+13, r26	; 0x0d
    2356:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2358:	6b 85       	ldd	r22, Y+11	; 0x0b
    235a:	7c 85       	ldd	r23, Y+12	; 0x0c
    235c:	8d 85       	ldd	r24, Y+13	; 0x0d
    235e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4a ef       	ldi	r20, 0xFA	; 250
    2366:	54 e4       	ldi	r21, 0x44	; 68
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	8f 83       	std	Y+7, r24	; 0x07
    2372:	98 87       	std	Y+8, r25	; 0x08
    2374:	a9 87       	std	Y+9, r26	; 0x09
    2376:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2378:	6f 81       	ldd	r22, Y+7	; 0x07
    237a:	78 85       	ldd	r23, Y+8	; 0x08
    237c:	89 85       	ldd	r24, Y+9	; 0x09
    237e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e8       	ldi	r20, 0x80	; 128
    2386:	5f e3       	ldi	r21, 0x3F	; 63
    2388:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    238c:	88 23       	and	r24, r24
    238e:	2c f4       	brge	.+10     	; 0x239a <LCD_VidIntilaization_8bit+0x350>
		__ticks = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	3f c0       	rjmp	.+126    	; 0x2418 <LCD_VidIntilaization_8bit+0x3ce>
	else if (__tmp > 65535)
    239a:	6f 81       	ldd	r22, Y+7	; 0x07
    239c:	78 85       	ldd	r23, Y+8	; 0x08
    239e:	89 85       	ldd	r24, Y+9	; 0x09
    23a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	4c f5       	brge	.+82     	; 0x2404 <LCD_VidIntilaization_8bit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e2       	ldi	r20, 0x20	; 32
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9e 83       	std	Y+6, r25	; 0x06
    23d8:	8d 83       	std	Y+5, r24	; 0x05
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <LCD_VidIntilaization_8bit+0x3b0>
    23dc:	88 ec       	ldi	r24, 0xC8	; 200
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9c 83       	std	Y+4, r25	; 0x04
    23e2:	8b 83       	std	Y+3, r24	; 0x03
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <LCD_VidIntilaization_8bit+0x39e>
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	8d 81       	ldd	r24, Y+5	; 0x05
    23f2:	9e 81       	ldd	r25, Y+6	; 0x06
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	9e 83       	std	Y+6, r25	; 0x06
    23f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f7       	brne	.-38     	; 0x23dc <LCD_VidIntilaization_8bit+0x392>
    2402:	14 c0       	rjmp	.+40     	; 0x242c <LCD_VidIntilaization_8bit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	6f 81       	ldd	r22, Y+7	; 0x07
    2406:	78 85       	ldd	r23, Y+8	; 0x08
    2408:	89 85       	ldd	r24, Y+9	; 0x09
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	9a 83       	std	Y+2, r25	; 0x02
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_VidIntilaization_8bit+0x3da>
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VidWriteCommand(0b00000001);  //Entery mode set
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_VidWriteCommand>
}
    2434:	e8 96       	adiw	r28, 0x38	; 56
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <LCD_VidWriteCommand>:

void LCD_VidWriteCommand(u8 LOC_u8Command)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	6d 97       	sbiw	r28, 0x1d	; 29
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(PORT_CONTROL,Pin_Control1,LOW); //RS=0
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_VidSetPinValue>
	DIO_VidSetPinValue(PORT_CONTROL,Pin_Control2,LOW); //Rw=0
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	61 e0       	ldi	r22, 0x01	; 1
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_VidSetPinValue>
	DIO_VidSetPortValue(PORT_DATA,LOC_u8Command); //Write command or data
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2474:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <DIO_VidSetPortValue>
	DIO_VidSetPinValue(PORT_CONTROL,Pin_Control3,HIGH);  //EN=1--rising edge
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	62 e0       	ldi	r22, 0x02	; 2
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_VidSetPinValue>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a0 e8       	ldi	r26, 0x80	; 128
    2488:	bf e3       	ldi	r27, 0x3F	; 63
    248a:	89 8f       	std	Y+25, r24	; 0x19
    248c:	9a 8f       	std	Y+26, r25	; 0x1a
    248e:	ab 8f       	std	Y+27, r26	; 0x1b
    2490:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	69 8d       	ldd	r22, Y+25	; 0x19
    2494:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2496:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2498:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a ef       	ldi	r20, 0xFA	; 250
    24a0:	54 e4       	ldi	r21, 0x44	; 68
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8d 8b       	std	Y+21, r24	; 0x15
    24ac:	9e 8b       	std	Y+22, r25	; 0x16
    24ae:	af 8b       	std	Y+23, r26	; 0x17
    24b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b2:	6d 89       	ldd	r22, Y+21	; 0x15
    24b4:	7e 89       	ldd	r23, Y+22	; 0x16
    24b6:	8f 89       	ldd	r24, Y+23	; 0x17
    24b8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	2c f4       	brge	.+10     	; 0x24d4 <LCD_VidWriteCommand+0x8e>
		__ticks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9c 8b       	std	Y+20, r25	; 0x14
    24d0:	8b 8b       	std	Y+19, r24	; 0x13
    24d2:	3f c0       	rjmp	.+126    	; 0x2552 <LCD_VidWriteCommand+0x10c>
	else if (__tmp > 65535)
    24d4:	6d 89       	ldd	r22, Y+21	; 0x15
    24d6:	7e 89       	ldd	r23, Y+22	; 0x16
    24d8:	8f 89       	ldd	r24, Y+23	; 0x17
    24da:	98 8d       	ldd	r25, Y+24	; 0x18
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	3f ef       	ldi	r19, 0xFF	; 255
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	57 e4       	ldi	r21, 0x47	; 71
    24e4:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	4c f5       	brge	.+82     	; 0x253e <LCD_VidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	69 8d       	ldd	r22, Y+25	; 0x19
    24ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9c 8b       	std	Y+20, r25	; 0x14
    2512:	8b 8b       	std	Y+19, r24	; 0x13
    2514:	0f c0       	rjmp	.+30     	; 0x2534 <LCD_VidWriteCommand+0xee>
    2516:	88 ec       	ldi	r24, 0xC8	; 200
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9a 8b       	std	Y+18, r25	; 0x12
    251c:	89 8b       	std	Y+17, r24	; 0x11
    251e:	89 89       	ldd	r24, Y+17	; 0x11
    2520:	9a 89       	ldd	r25, Y+18	; 0x12
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_VidWriteCommand+0xdc>
    2526:	9a 8b       	std	Y+18, r25	; 0x12
    2528:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	8b 89       	ldd	r24, Y+19	; 0x13
    252c:	9c 89       	ldd	r25, Y+20	; 0x14
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	9c 8b       	std	Y+20, r25	; 0x14
    2532:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	8b 89       	ldd	r24, Y+19	; 0x13
    2536:	9c 89       	ldd	r25, Y+20	; 0x14
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	69 f7       	brne	.-38     	; 0x2516 <LCD_VidWriteCommand+0xd0>
    253c:	14 c0       	rjmp	.+40     	; 0x2566 <LCD_VidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253e:	6d 89       	ldd	r22, Y+21	; 0x15
    2540:	7e 89       	ldd	r23, Y+22	; 0x16
    2542:	8f 89       	ldd	r24, Y+23	; 0x17
    2544:	98 8d       	ldd	r25, Y+24	; 0x18
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9c 8b       	std	Y+20, r25	; 0x14
    2550:	8b 8b       	std	Y+19, r24	; 0x13
    2552:	8b 89       	ldd	r24, Y+19	; 0x13
    2554:	9c 89       	ldd	r25, Y+20	; 0x14
    2556:	98 8b       	std	Y+16, r25	; 0x10
    2558:	8f 87       	std	Y+15, r24	; 0x0f
    255a:	8f 85       	ldd	r24, Y+15	; 0x0f
    255c:	98 89       	ldd	r25, Y+16	; 0x10
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_VidWriteCommand+0x118>
    2562:	98 8b       	std	Y+16, r25	; 0x10
    2564:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(PORT_CONTROL,Pin_Control3,LOW);  //EN=0--falling edge
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	62 e0       	ldi	r22, 0x02	; 2
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_VidSetPinValue>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	a0 e8       	ldi	r26, 0x80	; 128
    2576:	bf e3       	ldi	r27, 0x3F	; 63
    2578:	8b 87       	std	Y+11, r24	; 0x0b
    257a:	9c 87       	std	Y+12, r25	; 0x0c
    257c:	ad 87       	std	Y+13, r26	; 0x0d
    257e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2580:	6b 85       	ldd	r22, Y+11	; 0x0b
    2582:	7c 85       	ldd	r23, Y+12	; 0x0c
    2584:	8d 85       	ldd	r24, Y+13	; 0x0d
    2586:	9e 85       	ldd	r25, Y+14	; 0x0e
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	4a ef       	ldi	r20, 0xFA	; 250
    258e:	54 e4       	ldi	r21, 0x44	; 68
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	8f 83       	std	Y+7, r24	; 0x07
    259a:	98 87       	std	Y+8, r25	; 0x08
    259c:	a9 87       	std	Y+9, r26	; 0x09
    259e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a0:	6f 81       	ldd	r22, Y+7	; 0x07
    25a2:	78 85       	ldd	r23, Y+8	; 0x08
    25a4:	89 85       	ldd	r24, Y+9	; 0x09
    25a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e8       	ldi	r20, 0x80	; 128
    25ae:	5f e3       	ldi	r21, 0x3F	; 63
    25b0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    25b4:	88 23       	and	r24, r24
    25b6:	2c f4       	brge	.+10     	; 0x25c2 <LCD_VidWriteCommand+0x17c>
		__ticks = 1;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	3f c0       	rjmp	.+126    	; 0x2640 <LCD_VidWriteCommand+0x1fa>
	else if (__tmp > 65535)
    25c2:	6f 81       	ldd	r22, Y+7	; 0x07
    25c4:	78 85       	ldd	r23, Y+8	; 0x08
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	3f ef       	ldi	r19, 0xFF	; 255
    25ce:	4f e7       	ldi	r20, 0x7F	; 127
    25d0:	57 e4       	ldi	r21, 0x47	; 71
    25d2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    25d6:	18 16       	cp	r1, r24
    25d8:	4c f5       	brge	.+82     	; 0x262c <LCD_VidWriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25da:	6b 85       	ldd	r22, Y+11	; 0x0b
    25dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25de:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e2       	ldi	r20, 0x20	; 32
    25e8:	51 e4       	ldi	r21, 0x41	; 65
    25ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	bc 01       	movw	r22, r24
    25f4:	cd 01       	movw	r24, r26
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	9e 83       	std	Y+6, r25	; 0x06
    2600:	8d 83       	std	Y+5, r24	; 0x05
    2602:	0f c0       	rjmp	.+30     	; 0x2622 <LCD_VidWriteCommand+0x1dc>
    2604:	88 ec       	ldi	r24, 0xC8	; 200
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	9c 83       	std	Y+4, r25	; 0x04
    260a:	8b 83       	std	Y+3, r24	; 0x03
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <LCD_VidWriteCommand+0x1ca>
    2614:	9c 83       	std	Y+4, r25	; 0x04
    2616:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2622:	8d 81       	ldd	r24, Y+5	; 0x05
    2624:	9e 81       	ldd	r25, Y+6	; 0x06
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	69 f7       	brne	.-38     	; 0x2604 <LCD_VidWriteCommand+0x1be>
    262a:	14 c0       	rjmp	.+40     	; 0x2654 <LCD_VidWriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262c:	6f 81       	ldd	r22, Y+7	; 0x07
    262e:	78 85       	ldd	r23, Y+8	; 0x08
    2630:	89 85       	ldd	r24, Y+9	; 0x09
    2632:	9a 85       	ldd	r25, Y+10	; 0x0a
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	9e 83       	std	Y+6, r25	; 0x06
    263e:	8d 83       	std	Y+5, r24	; 0x05
    2640:	8d 81       	ldd	r24, Y+5	; 0x05
    2642:	9e 81       	ldd	r25, Y+6	; 0x06
    2644:	9a 83       	std	Y+2, r25	; 0x02
    2646:	89 83       	std	Y+1, r24	; 0x01
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <LCD_VidWriteCommand+0x206>
    2650:	9a 83       	std	Y+2, r25	; 0x02
    2652:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2654:	6d 96       	adiw	r28, 0x1d	; 29
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <LCD_VidWriteData>:
void LCD_VidWriteData(u8 LOC_u8Data)
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	6d 97       	sbiw	r28, 0x1d	; 29
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(PORT_CONTROL,Pin_Control1,HIGH); //RS=1
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	60 e0       	ldi	r22, 0x00	; 0
    2680:	41 e0       	ldi	r20, 0x01	; 1
    2682:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_VidSetPinValue>
	DIO_VidSetPinValue(PORT_CONTROL,Pin_Control2,LOW); //Rw=0
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	61 e0       	ldi	r22, 0x01	; 1
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_VidSetPinValue>
	DIO_VidSetPortValue(PORT_DATA,LOC_u8Data); //Write command or data
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2694:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <DIO_VidSetPortValue>
	DIO_VidSetPinValue(PORT_CONTROL,Pin_Control3,HIGH); //EN=1--rising edge
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	62 e0       	ldi	r22, 0x02	; 2
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_VidSetPinValue>
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	a0 e8       	ldi	r26, 0x80	; 128
    26a8:	bf e3       	ldi	r27, 0x3F	; 63
    26aa:	89 8f       	std	Y+25, r24	; 0x19
    26ac:	9a 8f       	std	Y+26, r25	; 0x1a
    26ae:	ab 8f       	std	Y+27, r26	; 0x1b
    26b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b2:	69 8d       	ldd	r22, Y+25	; 0x19
    26b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	4a ef       	ldi	r20, 0xFA	; 250
    26c0:	54 e4       	ldi	r21, 0x44	; 68
    26c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	8d 8b       	std	Y+21, r24	; 0x15
    26cc:	9e 8b       	std	Y+22, r25	; 0x16
    26ce:	af 8b       	std	Y+23, r26	; 0x17
    26d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d2:	6d 89       	ldd	r22, Y+21	; 0x15
    26d4:	7e 89       	ldd	r23, Y+22	; 0x16
    26d6:	8f 89       	ldd	r24, Y+23	; 0x17
    26d8:	98 8d       	ldd	r25, Y+24	; 0x18
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e8       	ldi	r20, 0x80	; 128
    26e0:	5f e3       	ldi	r21, 0x3F	; 63
    26e2:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    26e6:	88 23       	and	r24, r24
    26e8:	2c f4       	brge	.+10     	; 0x26f4 <LCD_VidWriteData+0x8e>
		__ticks = 1;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	9c 8b       	std	Y+20, r25	; 0x14
    26f0:	8b 8b       	std	Y+19, r24	; 0x13
    26f2:	3f c0       	rjmp	.+126    	; 0x2772 <LCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    26f4:	6d 89       	ldd	r22, Y+21	; 0x15
    26f6:	7e 89       	ldd	r23, Y+22	; 0x16
    26f8:	8f 89       	ldd	r24, Y+23	; 0x17
    26fa:	98 8d       	ldd	r25, Y+24	; 0x18
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	3f ef       	ldi	r19, 0xFF	; 255
    2700:	4f e7       	ldi	r20, 0x7F	; 127
    2702:	57 e4       	ldi	r21, 0x47	; 71
    2704:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2708:	18 16       	cp	r1, r24
    270a:	4c f5       	brge	.+82     	; 0x275e <LCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270c:	69 8d       	ldd	r22, Y+25	; 0x19
    270e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2710:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2712:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e2       	ldi	r20, 0x20	; 32
    271a:	51 e4       	ldi	r21, 0x41	; 65
    271c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	bc 01       	movw	r22, r24
    2726:	cd 01       	movw	r24, r26
    2728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	9c 8b       	std	Y+20, r25	; 0x14
    2732:	8b 8b       	std	Y+19, r24	; 0x13
    2734:	0f c0       	rjmp	.+30     	; 0x2754 <LCD_VidWriteData+0xee>
    2736:	88 ec       	ldi	r24, 0xC8	; 200
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9a 8b       	std	Y+18, r25	; 0x12
    273c:	89 8b       	std	Y+17, r24	; 0x11
    273e:	89 89       	ldd	r24, Y+17	; 0x11
    2740:	9a 89       	ldd	r25, Y+18	; 0x12
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <LCD_VidWriteData+0xdc>
    2746:	9a 8b       	std	Y+18, r25	; 0x12
    2748:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274a:	8b 89       	ldd	r24, Y+19	; 0x13
    274c:	9c 89       	ldd	r25, Y+20	; 0x14
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	9c 8b       	std	Y+20, r25	; 0x14
    2752:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2754:	8b 89       	ldd	r24, Y+19	; 0x13
    2756:	9c 89       	ldd	r25, Y+20	; 0x14
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	69 f7       	brne	.-38     	; 0x2736 <LCD_VidWriteData+0xd0>
    275c:	14 c0       	rjmp	.+40     	; 0x2786 <LCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275e:	6d 89       	ldd	r22, Y+21	; 0x15
    2760:	7e 89       	ldd	r23, Y+22	; 0x16
    2762:	8f 89       	ldd	r24, Y+23	; 0x17
    2764:	98 8d       	ldd	r25, Y+24	; 0x18
    2766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	9c 8b       	std	Y+20, r25	; 0x14
    2770:	8b 8b       	std	Y+19, r24	; 0x13
    2772:	8b 89       	ldd	r24, Y+19	; 0x13
    2774:	9c 89       	ldd	r25, Y+20	; 0x14
    2776:	98 8b       	std	Y+16, r25	; 0x10
    2778:	8f 87       	std	Y+15, r24	; 0x0f
    277a:	8f 85       	ldd	r24, Y+15	; 0x0f
    277c:	98 89       	ldd	r25, Y+16	; 0x10
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <LCD_VidWriteData+0x118>
    2782:	98 8b       	std	Y+16, r25	; 0x10
    2784:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(PORT_CONTROL,Pin_Control3,LOW); //EN=0--falling edge
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	62 e0       	ldi	r22, 0x02	; 2
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_VidSetPinValue>
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	a0 e8       	ldi	r26, 0x80	; 128
    2796:	bf e3       	ldi	r27, 0x3F	; 63
    2798:	8b 87       	std	Y+11, r24	; 0x0b
    279a:	9c 87       	std	Y+12, r25	; 0x0c
    279c:	ad 87       	std	Y+13, r26	; 0x0d
    279e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4a ef       	ldi	r20, 0xFA	; 250
    27ae:	54 e4       	ldi	r21, 0x44	; 68
    27b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	8f 83       	std	Y+7, r24	; 0x07
    27ba:	98 87       	std	Y+8, r25	; 0x08
    27bc:	a9 87       	std	Y+9, r26	; 0x09
    27be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c0:	6f 81       	ldd	r22, Y+7	; 0x07
    27c2:	78 85       	ldd	r23, Y+8	; 0x08
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e8       	ldi	r20, 0x80	; 128
    27ce:	5f e3       	ldi	r21, 0x3F	; 63
    27d0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    27d4:	88 23       	and	r24, r24
    27d6:	2c f4       	brge	.+10     	; 0x27e2 <LCD_VidWriteData+0x17c>
		__ticks = 1;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
    27e0:	3f c0       	rjmp	.+126    	; 0x2860 <LCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    27e2:	6f 81       	ldd	r22, Y+7	; 0x07
    27e4:	78 85       	ldd	r23, Y+8	; 0x08
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	3f ef       	ldi	r19, 0xFF	; 255
    27ee:	4f e7       	ldi	r20, 0x7F	; 127
    27f0:	57 e4       	ldi	r21, 0x47	; 71
    27f2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    27f6:	18 16       	cp	r1, r24
    27f8:	4c f5       	brge	.+82     	; 0x284c <LCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2800:	9e 85       	ldd	r25, Y+14	; 0x0e
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e2       	ldi	r20, 0x20	; 32
    2808:	51 e4       	ldi	r21, 0x41	; 65
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	bc 01       	movw	r22, r24
    2814:	cd 01       	movw	r24, r26
    2816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	0f c0       	rjmp	.+30     	; 0x2842 <LCD_VidWriteData+0x1dc>
    2824:	88 ec       	ldi	r24, 0xC8	; 200
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	9c 83       	std	Y+4, r25	; 0x04
    282a:	8b 83       	std	Y+3, r24	; 0x03
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	9c 81       	ldd	r25, Y+4	; 0x04
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <LCD_VidWriteData+0x1ca>
    2834:	9c 83       	std	Y+4, r25	; 0x04
    2836:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	69 f7       	brne	.-38     	; 0x2824 <LCD_VidWriteData+0x1be>
    284a:	14 c0       	rjmp	.+40     	; 0x2874 <LCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284c:	6f 81       	ldd	r22, Y+7	; 0x07
    284e:	78 85       	ldd	r23, Y+8	; 0x08
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	9a 85       	ldd	r25, Y+10	; 0x0a
    2854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	8d 83       	std	Y+5, r24	; 0x05
    2860:	8d 81       	ldd	r24, Y+5	; 0x05
    2862:	9e 81       	ldd	r25, Y+6	; 0x06
    2864:	9a 83       	std	Y+2, r25	; 0x02
    2866:	89 83       	std	Y+1, r24	; 0x01
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	9a 81       	ldd	r25, Y+2	; 0x02
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <LCD_VidWriteData+0x206>
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2874:	6d 96       	adiw	r28, 0x1d	; 29
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	08 95       	ret

00002886 <LCD_VidWriteString>:

void LCD_VidWriteString(u8 *ptr)     

{
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	00 d0       	rcall	.+0      	; 0x288c <LCD_VidWriteString+0x6>
    288c:	0f 92       	push	r0
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
    2892:	9b 83       	std	Y+3, r25	; 0x03
    2894:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i = 0; ptr[i] != '\0'; i++)
    2896:	19 82       	std	Y+1, r1	; 0x01
    2898:	0e c0       	rjmp	.+28     	; 0x28b6 <LCD_VidWriteString+0x30>
	{
		LCD_VidWriteData(ptr[i]);
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	9b 81       	ldd	r25, Y+3	; 0x03
    28a4:	fc 01       	movw	r30, r24
    28a6:	e2 0f       	add	r30, r18
    28a8:	f3 1f       	adc	r31, r19
    28aa:	80 81       	ld	r24, Z
    28ac:	0e 94 33 13 	call	0x2666	; 0x2666 <LCD_VidWriteData>

void LCD_VidWriteString(u8 *ptr)     

{
	u8 i;
	for(i = 0; ptr[i] != '\0'; i++)
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	8f 5f       	subi	r24, 0xFF	; 255
    28b4:	89 83       	std	Y+1, r24	; 0x01
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	28 2f       	mov	r18, r24
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	9b 81       	ldd	r25, Y+3	; 0x03
    28c0:	fc 01       	movw	r30, r24
    28c2:	e2 0f       	add	r30, r18
    28c4:	f3 1f       	adc	r31, r19
    28c6:	80 81       	ld	r24, Z
    28c8:	88 23       	and	r24, r24
    28ca:	39 f7       	brne	.-50     	; 0x289a <LCD_VidWriteString+0x14>
	{
		LCD_VidWriteData(ptr[i]);
	}
}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <LCD_VidMoveWord>:
void LCD_VidMoveWord(u8 *ptr)
{
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	a0 97       	sbiw	r28, 0x20	; 32
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	98 a3       	std	Y+32, r25	; 0x20
    28ee:	8f 8f       	std	Y+31, r24	; 0x1f

	 LCD_VidWriteString(ptr);
    28f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f2:	98 a1       	ldd	r25, Y+32	; 0x20
    28f4:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_VidWriteString>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a8 ec       	ldi	r26, 0xC8	; 200
    28fe:	b3 e4       	ldi	r27, 0x43	; 67
    2900:	89 8f       	std	Y+25, r24	; 0x19
    2902:	9a 8f       	std	Y+26, r25	; 0x1a
    2904:	ab 8f       	std	Y+27, r26	; 0x1b
    2906:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2908:	69 8d       	ldd	r22, Y+25	; 0x19
    290a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    290c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    290e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	4a ef       	ldi	r20, 0xFA	; 250
    2916:	54 e4       	ldi	r21, 0x44	; 68
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	8d 8b       	std	Y+21, r24	; 0x15
    2922:	9e 8b       	std	Y+22, r25	; 0x16
    2924:	af 8b       	std	Y+23, r26	; 0x17
    2926:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2928:	6d 89       	ldd	r22, Y+21	; 0x15
    292a:	7e 89       	ldd	r23, Y+22	; 0x16
    292c:	8f 89       	ldd	r24, Y+23	; 0x17
    292e:	98 8d       	ldd	r25, Y+24	; 0x18
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    293c:	88 23       	and	r24, r24
    293e:	2c f4       	brge	.+10     	; 0x294a <LCD_VidMoveWord+0x72>
		__ticks = 1;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9c 8b       	std	Y+20, r25	; 0x14
    2946:	8b 8b       	std	Y+19, r24	; 0x13
    2948:	3f c0       	rjmp	.+126    	; 0x29c8 <LCD_VidMoveWord+0xf0>
	else if (__tmp > 65535)
    294a:	6d 89       	ldd	r22, Y+21	; 0x15
    294c:	7e 89       	ldd	r23, Y+22	; 0x16
    294e:	8f 89       	ldd	r24, Y+23	; 0x17
    2950:	98 8d       	ldd	r25, Y+24	; 0x18
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	4c f5       	brge	.+82     	; 0x29b4 <LCD_VidMoveWord+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2962:	69 8d       	ldd	r22, Y+25	; 0x19
    2964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e2       	ldi	r20, 0x20	; 32
    2970:	51 e4       	ldi	r21, 0x41	; 65
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	9c 8b       	std	Y+20, r25	; 0x14
    2988:	8b 8b       	std	Y+19, r24	; 0x13
    298a:	0f c0       	rjmp	.+30     	; 0x29aa <LCD_VidMoveWord+0xd2>
    298c:	88 ec       	ldi	r24, 0xC8	; 200
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9a 8b       	std	Y+18, r25	; 0x12
    2992:	89 8b       	std	Y+17, r24	; 0x11
    2994:	89 89       	ldd	r24, Y+17	; 0x11
    2996:	9a 89       	ldd	r25, Y+18	; 0x12
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_VidMoveWord+0xc0>
    299c:	9a 8b       	std	Y+18, r25	; 0x12
    299e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a0:	8b 89       	ldd	r24, Y+19	; 0x13
    29a2:	9c 89       	ldd	r25, Y+20	; 0x14
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	9c 8b       	std	Y+20, r25	; 0x14
    29a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29aa:	8b 89       	ldd	r24, Y+19	; 0x13
    29ac:	9c 89       	ldd	r25, Y+20	; 0x14
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	69 f7       	brne	.-38     	; 0x298c <LCD_VidMoveWord+0xb4>
    29b2:	14 c0       	rjmp	.+40     	; 0x29dc <LCD_VidMoveWord+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b4:	6d 89       	ldd	r22, Y+21	; 0x15
    29b6:	7e 89       	ldd	r23, Y+22	; 0x16
    29b8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ba:	98 8d       	ldd	r25, Y+24	; 0x18
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9c 8b       	std	Y+20, r25	; 0x14
    29c6:	8b 8b       	std	Y+19, r24	; 0x13
    29c8:	8b 89       	ldd	r24, Y+19	; 0x13
    29ca:	9c 89       	ldd	r25, Y+20	; 0x14
    29cc:	98 8b       	std	Y+16, r25	; 0x10
    29ce:	8f 87       	std	Y+15, r24	; 0x0f
    29d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d2:	98 89       	ldd	r25, Y+16	; 0x10
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_VidMoveWord+0xfc>
    29d8:	98 8b       	std	Y+16, r25	; 0x10
    29da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(400);
	for(u8 j=40;j>0;j--)
    29dc:	88 e2       	ldi	r24, 0x28	; 40
    29de:	8e 8f       	std	Y+30, r24	; 0x1e
    29e0:	89 c0       	rjmp	.+274    	; 0x2af4 <LCD_VidMoveWord+0x21c>
	{
		LCD_VidWriteCommand(0b00000001);  //Display_clear
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_VidWriteCommand>
		for(u8 i=40;i>=j;i--)
    29e8:	88 e2       	ldi	r24, 0x28	; 40
    29ea:	8d 8f       	std	Y+29, r24	; 0x1d
    29ec:	06 c0       	rjmp	.+12     	; 0x29fa <LCD_VidMoveWord+0x122>
		{
			LCD_VidWriteCommand(0b00011100);//Shift Display
    29ee:	8c e1       	ldi	r24, 0x1C	; 28
    29f0:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_VidWriteCommand>
	 LCD_VidWriteString(ptr);
	_delay_ms(400);
	for(u8 j=40;j>0;j--)
	{
		LCD_VidWriteCommand(0b00000001);  //Display_clear
		for(u8 i=40;i>=j;i--)
    29f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29f6:	81 50       	subi	r24, 0x01	; 1
    29f8:	8d 8f       	std	Y+29, r24	; 0x1d
    29fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29fe:	98 17       	cp	r25, r24
    2a00:	b0 f7       	brcc	.-20     	; 0x29ee <LCD_VidMoveWord+0x116>
		{
			LCD_VidWriteCommand(0b00011100);//Shift Display
		}
		 LCD_VidWriteString(ptr);
    2a02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a04:	98 a1       	ldd	r25, Y+32	; 0x20
    2a06:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_VidWriteString>
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	a8 ec       	ldi	r26, 0xC8	; 200
    2a10:	b3 e4       	ldi	r27, 0x43	; 67
    2a12:	8b 87       	std	Y+11, r24	; 0x0b
    2a14:	9c 87       	std	Y+12, r25	; 0x0c
    2a16:	ad 87       	std	Y+13, r26	; 0x0d
    2a18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	4a ef       	ldi	r20, 0xFA	; 250
    2a28:	54 e4       	ldi	r21, 0x44	; 68
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	8f 83       	std	Y+7, r24	; 0x07
    2a34:	98 87       	std	Y+8, r25	; 0x08
    2a36:	a9 87       	std	Y+9, r26	; 0x09
    2a38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3c:	78 85       	ldd	r23, Y+8	; 0x08
    2a3e:	89 85       	ldd	r24, Y+9	; 0x09
    2a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e8       	ldi	r20, 0x80	; 128
    2a48:	5f e3       	ldi	r21, 0x3F	; 63
    2a4a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2a4e:	88 23       	and	r24, r24
    2a50:	2c f4       	brge	.+10     	; 0x2a5c <LCD_VidMoveWord+0x184>
		__ticks = 1;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9e 83       	std	Y+6, r25	; 0x06
    2a58:	8d 83       	std	Y+5, r24	; 0x05
    2a5a:	3f c0       	rjmp	.+126    	; 0x2ada <LCD_VidMoveWord+0x202>
	else if (__tmp > 65535)
    2a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5e:	78 85       	ldd	r23, Y+8	; 0x08
    2a60:	89 85       	ldd	r24, Y+9	; 0x09
    2a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	4f e7       	ldi	r20, 0x7F	; 127
    2a6a:	57 e4       	ldi	r21, 0x47	; 71
    2a6c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2a70:	18 16       	cp	r1, r24
    2a72:	4c f5       	brge	.+82     	; 0x2ac6 <LCD_VidMoveWord+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e2       	ldi	r20, 0x20	; 32
    2a82:	51 e4       	ldi	r21, 0x41	; 65
    2a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	bc 01       	movw	r22, r24
    2a8e:	cd 01       	movw	r24, r26
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9e 83       	std	Y+6, r25	; 0x06
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
    2a9c:	0f c0       	rjmp	.+30     	; 0x2abc <LCD_VidMoveWord+0x1e4>
    2a9e:	88 ec       	ldi	r24, 0xC8	; 200
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9c 83       	std	Y+4, r25	; 0x04
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
    2aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <LCD_VidMoveWord+0x1d2>
    2aae:	9c 83       	std	Y+4, r25	; 0x04
    2ab0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	69 f7       	brne	.-38     	; 0x2a9e <LCD_VidMoveWord+0x1c6>
    2ac4:	14 c0       	rjmp	.+40     	; 0x2aee <LCD_VidMoveWord+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac8:	78 85       	ldd	r23, Y+8	; 0x08
    2aca:	89 85       	ldd	r24, Y+9	; 0x09
    2acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9e 83       	std	Y+6, r25	; 0x06
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <LCD_VidMoveWord+0x20e>
    2aea:	9a 83       	std	Y+2, r25	; 0x02
    2aec:	89 83       	std	Y+1, r24	; 0x01
void LCD_VidMoveWord(u8 *ptr)
{

	 LCD_VidWriteString(ptr);
	_delay_ms(400);
	for(u8 j=40;j>0;j--)
    2aee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2af0:	81 50       	subi	r24, 0x01	; 1
    2af2:	8e 8f       	std	Y+30, r24	; 0x1e
    2af4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2af6:	88 23       	and	r24, r24
    2af8:	09 f0       	breq	.+2      	; 0x2afc <LCD_VidMoveWord+0x224>
    2afa:	73 cf       	rjmp	.-282    	; 0x29e2 <LCD_VidMoveWord+0x10a>
			LCD_VidWriteCommand(0b00011100);//Shift Display
		}
		 LCD_VidWriteString(ptr);
		_delay_ms(400);
	}
}
    2afc:	a0 96       	adiw	r28, 0x20	; 32
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	08 95       	ret

00002b0e <LCD_VidFloatNum>:


		void LCD_VidFloatNum(f32 totalnum )//3.48
	{		      
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	2c 97       	sbiw	r28, 0x0c	; 12
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	69 87       	std	Y+9, r22	; 0x09
    2b24:	7a 87       	std	Y+10, r23	; 0x0a
    2b26:	8b 87       	std	Y+11, r24	; 0x0b
    2b28:	9c 87       	std	Y+12, r25	; 0x0c
		u32 num_after=0;
    2b2a:	1d 82       	std	Y+5, r1	; 0x05
    2b2c:	1e 82       	std	Y+6, r1	; 0x06
    2b2e:	1f 82       	std	Y+7, r1	; 0x07
    2b30:	18 86       	std	Y+8, r1	; 0x08
		u32 num_before=totalnum;//num1 before decimal point //3
    2b32:	69 85       	ldd	r22, Y+9	; 0x09
    2b34:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b36:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b38:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	89 83       	std	Y+1, r24	; 0x01
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	ab 83       	std	Y+3, r26	; 0x03
    2b48:	bc 83       	std	Y+4, r27	; 0x04
		totalnum= totalnum-num_before;//num2 after decimal point//0.48
    2b4a:	69 81       	ldd	r22, Y+1	; 0x01
    2b4c:	7a 81       	ldd	r23, Y+2	; 0x02
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	9c 81       	ldd	r25, Y+4	; 0x04
    2b52:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    2b56:	9b 01       	movw	r18, r22
    2b58:	ac 01       	movw	r20, r24
    2b5a:	69 85       	ldd	r22, Y+9	; 0x09
    2b5c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b60:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b62:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	89 87       	std	Y+9, r24	; 0x09
    2b6c:	9a 87       	std	Y+10, r25	; 0x0a
    2b6e:	ab 87       	std	Y+11, r26	; 0x0b
    2b70:	bc 87       	std	Y+12, r27	; 0x0c
    2b72:	10 c0       	rjmp	.+32     	; 0x2b94 <LCD_VidFloatNum+0x86>
		while(totalnum != (u32)totalnum)//48.0007827 != 48
		{
			totalnum =totalnum *10; //48.000000   	
    2b74:	69 85       	ldd	r22, Y+9	; 0x09
    2b76:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b78:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e2       	ldi	r20, 0x20	; 32
    2b82:	51 e4       	ldi	r21, 0x41	; 65
    2b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	89 87       	std	Y+9, r24	; 0x09
    2b8e:	9a 87       	std	Y+10, r25	; 0x0a
    2b90:	ab 87       	std	Y+11, r26	; 0x0b
    2b92:	bc 87       	std	Y+12, r27	; 0x0c
		void LCD_VidFloatNum(f32 totalnum )//3.48
	{		      
		u32 num_after=0;
		u32 num_before=totalnum;//num1 before decimal point //3
		totalnum= totalnum-num_before;//num2 after decimal point//0.48
		while(totalnum != (u32)totalnum)//48.0007827 != 48
    2b94:	69 85       	ldd	r22, Y+9	; 0x09
    2b96:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b98:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	cd 01       	movw	r24, r26
    2ba8:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	cd 01       	movw	r24, r26
    2bb4:	29 85       	ldd	r18, Y+9	; 0x09
    2bb6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bb8:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bba:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bbc:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    2bc0:	88 23       	and	r24, r24
    2bc2:	c1 f6       	brne	.-80     	; 0x2b74 <LCD_VidFloatNum+0x66>
		{
			totalnum =totalnum *10; //48.000000   	
		}
		num_after= totalnum; //48 
    2bc4:	69 85       	ldd	r22, Y+9	; 0x09
    2bc6:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bca:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
    2bd6:	9e 83       	std	Y+6, r25	; 0x06
    2bd8:	af 83       	std	Y+7, r26	; 0x07
    2bda:	b8 87       	std	Y+8, r27	; 0x08
		LCD_VidWriteNum(num_before);//num1 before decimal point
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	ab 81       	ldd	r26, Y+3	; 0x03
    2be2:	bc 81       	ldd	r27, Y+4	; 0x04
    2be4:	bc 01       	movw	r22, r24
    2be6:	cd 01       	movw	r24, r26
    2be8:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <LCD_VidWriteNum>
		LCD_VidWriteString(".");//decimal point
    2bec:	80 e6       	ldi	r24, 0x60	; 96
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_VidWriteString>
		LCD_VidWriteNum(num_after);//num2 before decimal point
    2bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf8:	af 81       	ldd	r26, Y+7	; 0x07
    2bfa:	b8 85       	ldd	r27, Y+8	; 0x08
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <LCD_VidWriteNum>
	}
    2c04:	2c 96       	adiw	r28, 0x0c	; 12
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	08 95       	ret

00002c16 <LCD_VidWriteNum>:
	
	
	void LCD_VidWriteNum(u32 LOC_u32num)
	{
    2c16:	ef 92       	push	r14
    2c18:	ff 92       	push	r15
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	2c 97       	sbiw	r28, 0x0c	; 12
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	69 87       	std	Y+9, r22	; 0x09
    2c34:	7a 87       	std	Y+10, r23	; 0x0a
    2c36:	8b 87       	std	Y+11, r24	; 0x0b
    2c38:	9c 87       	std	Y+12, r25	; 0x0c
		u32 revrese=0;
    2c3a:	1d 82       	std	Y+5, r1	; 0x05
    2c3c:	1e 82       	std	Y+6, r1	; 0x06
    2c3e:	1f 82       	std	Y+7, r1	; 0x07
    2c40:	18 86       	std	Y+8, r1	; 0x08
		u8 y;
		u8 counter=0;
    2c42:	1b 82       	std	Y+3, r1	; 0x03
		if(LOC_u32num==0)
    2c44:	89 85       	ldd	r24, Y+9	; 0x09
    2c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c48:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c4a:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	a1 05       	cpc	r26, r1
    2c50:	b1 05       	cpc	r27, r1
    2c52:	09 f0       	breq	.+2      	; 0x2c56 <LCD_VidWriteNum+0x40>
    2c54:	46 c0       	rjmp	.+140    	; 0x2ce2 <LCD_VidWriteNum+0xcc>
		{
			LCD_VidWriteData(48);
    2c56:	80 e3       	ldi	r24, 0x30	; 48
    2c58:	0e 94 33 13 	call	0x2666	; 0x2666 <LCD_VidWriteData>
    2c5c:	88 c0       	rjmp	.+272    	; 0x2d6e <LCD_VidWriteNum+0x158>
		}
		else
	{
		while(LOC_u32num>0)
		{
			revrese=(revrese*10)+(LOC_u32num)%10;
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	af 81       	ldd	r26, Y+7	; 0x07
    2c64:	b8 85       	ldd	r27, Y+8	; 0x08
    2c66:	2a e0       	ldi	r18, 0x0A	; 10
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	0e 94 5f 18 	call	0x30be	; 0x30be <__mulsi3>
    2c76:	7b 01       	movw	r14, r22
    2c78:	8c 01       	movw	r16, r24
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c80:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c82:	2a e0       	ldi	r18, 0x0A	; 10
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	bc 01       	movw	r22, r24
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 91 18 	call	0x3122	; 0x3122 <__udivmodsi4>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	8e 0d       	add	r24, r14
    2c98:	9f 1d       	adc	r25, r15
    2c9a:	a0 1f       	adc	r26, r16
    2c9c:	b1 1f       	adc	r27, r17
    2c9e:	8d 83       	std	Y+5, r24	; 0x05
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	af 83       	std	Y+7, r26	; 0x07
    2ca4:	b8 87       	std	Y+8, r27	; 0x08
			if(revrese==0)
    2ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    2caa:	af 81       	ldd	r26, Y+7	; 0x07
    2cac:	b8 85       	ldd	r27, Y+8	; 0x08
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	a1 05       	cpc	r26, r1
    2cb2:	b1 05       	cpc	r27, r1
    2cb4:	21 f4       	brne	.+8      	; 0x2cbe <LCD_VidWriteNum+0xa8>
			{
				 y=0;
    2cb6:	1c 82       	std	Y+4, r1	; 0x04
				 counter++;
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	8f 5f       	subi	r24, 0xFF	; 255
    2cbc:	8b 83       	std	Y+3, r24	; 0x03
			}
			LOC_u32num=LOC_u32num/10;
    2cbe:	89 85       	ldd	r24, Y+9	; 0x09
    2cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc2:	ab 85       	ldd	r26, Y+11	; 0x0b
    2cc4:	bc 85       	ldd	r27, Y+12	; 0x0c
    2cc6:	2a e0       	ldi	r18, 0x0A	; 10
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 91 18 	call	0x3122	; 0x3122 <__udivmodsi4>
    2cd6:	da 01       	movw	r26, r20
    2cd8:	c9 01       	movw	r24, r18
    2cda:	89 87       	std	Y+9, r24	; 0x09
    2cdc:	9a 87       	std	Y+10, r25	; 0x0a
    2cde:	ab 87       	std	Y+11, r26	; 0x0b
    2ce0:	bc 87       	std	Y+12, r27	; 0x0c
		{
			LCD_VidWriteData(48);
		}
		else
	{
		while(LOC_u32num>0)
    2ce2:	89 85       	ldd	r24, Y+9	; 0x09
    2ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce6:	ab 85       	ldd	r26, Y+11	; 0x0b
    2ce8:	bc 85       	ldd	r27, Y+12	; 0x0c
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	a1 05       	cpc	r26, r1
    2cee:	b1 05       	cpc	r27, r1
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <LCD_VidWriteNum+0xde>
    2cf2:	b5 cf       	rjmp	.-150    	; 0x2c5e <LCD_VidWriteNum+0x48>
    2cf4:	25 c0       	rjmp	.+74     	; 0x2d40 <LCD_VidWriteNum+0x12a>
			}
			LOC_u32num=LOC_u32num/10;
		}
		while(revrese>0)
		{
			u8 res=revrese%10;
    2cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfa:	af 81       	ldd	r26, Y+7	; 0x07
    2cfc:	b8 85       	ldd	r27, Y+8	; 0x08
    2cfe:	2a e0       	ldi	r18, 0x0A	; 10
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	50 e0       	ldi	r21, 0x00	; 0
    2d06:	bc 01       	movw	r22, r24
    2d08:	cd 01       	movw	r24, r26
    2d0a:	0e 94 91 18 	call	0x3122	; 0x3122 <__udivmodsi4>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	8a 83       	std	Y+2, r24	; 0x02
			LCD_VidWriteData(res+48);
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	80 5d       	subi	r24, 0xD0	; 208
    2d18:	0e 94 33 13 	call	0x2666	; 0x2666 <LCD_VidWriteData>
			revrese=revrese/10;
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d20:	af 81       	ldd	r26, Y+7	; 0x07
    2d22:	b8 85       	ldd	r27, Y+8	; 0x08
    2d24:	2a e0       	ldi	r18, 0x0A	; 10
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e0       	ldi	r20, 0x00	; 0
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 91 18 	call	0x3122	; 0x3122 <__udivmodsi4>
    2d34:	da 01       	movw	r26, r20
    2d36:	c9 01       	movw	r24, r18
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    2d3a:	9e 83       	std	Y+6, r25	; 0x06
    2d3c:	af 83       	std	Y+7, r26	; 0x07
    2d3e:	b8 87       	std	Y+8, r27	; 0x08
				 y=0;
				 counter++;
			}
			LOC_u32num=LOC_u32num/10;
		}
		while(revrese>0)
    2d40:	8d 81       	ldd	r24, Y+5	; 0x05
    2d42:	9e 81       	ldd	r25, Y+6	; 0x06
    2d44:	af 81       	ldd	r26, Y+7	; 0x07
    2d46:	b8 85       	ldd	r27, Y+8	; 0x08
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	a1 05       	cpc	r26, r1
    2d4c:	b1 05       	cpc	r27, r1
    2d4e:	99 f6       	brne	.-90     	; 0x2cf6 <LCD_VidWriteNum+0xe0>
		{
			u8 res=revrese%10;
			LCD_VidWriteData(res+48);
			revrese=revrese/10;
		}
		if(y==0)
    2d50:	8c 81       	ldd	r24, Y+4	; 0x04
    2d52:	88 23       	and	r24, r24
    2d54:	61 f4       	brne	.+24     	; 0x2d6e <LCD_VidWriteNum+0x158>
		{
			for(u8 i=0;i<counter;i++)
    2d56:	19 82       	std	Y+1, r1	; 0x01
    2d58:	06 c0       	rjmp	.+12     	; 0x2d66 <LCD_VidWriteNum+0x150>
			{
		LCD_VidWriteData(48);
    2d5a:	80 e3       	ldi	r24, 0x30	; 48
    2d5c:	0e 94 33 13 	call	0x2666	; 0x2666 <LCD_VidWriteData>
			LCD_VidWriteData(res+48);
			revrese=revrese/10;
		}
		if(y==0)
		{
			for(u8 i=0;i<counter;i++)
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	8f 5f       	subi	r24, 0xFF	; 255
    2d64:	89 83       	std	Y+1, r24	; 0x01
    2d66:	99 81       	ldd	r25, Y+1	; 0x01
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	98 17       	cp	r25, r24
    2d6c:	b0 f3       	brcs	.-20     	; 0x2d5a <LCD_VidWriteNum+0x144>
		LCD_VidWriteData(48);
			}
		}
	}	
		
	}
    2d6e:	2c 96       	adiw	r28, 0x0c	; 12
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	f8 94       	cli
    2d74:	de bf       	out	0x3e, r29	; 62
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	cd bf       	out	0x3d, r28	; 61
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	1f 91       	pop	r17
    2d80:	0f 91       	pop	r16
    2d82:	ff 90       	pop	r15
    2d84:	ef 90       	pop	r14
    2d86:	08 95       	ret

00002d88 <LCD_VidSetPosition>:

	void LCD_VidSetPosition(u8 LOC_u8Row,u8 LOC_u8Column)
	{
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <LCD_VidSetPosition+0x6>
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	89 83       	std	Y+1, r24	; 0x01
    2d94:	6a 83       	std	Y+2, r22	; 0x02
		if(LOC_u8Row==0)
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	88 23       	and	r24, r24
    2d9a:	29 f4       	brne	.+10     	; 0x2da6 <LCD_VidSetPosition+0x1e>
		{
			LCD_VidWriteCommand(128+LOC_u8Column);
    2d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9e:	80 58       	subi	r24, 0x80	; 128
    2da0:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_VidWriteCommand>
    2da4:	07 c0       	rjmp	.+14     	; 0x2db4 <LCD_VidSetPosition+0x2c>

		}
		else if(LOC_u8Row==1)
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	81 30       	cpi	r24, 0x01	; 1
    2daa:	21 f4       	brne	.+8      	; 0x2db4 <LCD_VidSetPosition+0x2c>
				{
					LCD_VidWriteCommand(128+64+LOC_u8Column);
    2dac:	8a 81       	ldd	r24, Y+2	; 0x02
    2dae:	80 54       	subi	r24, 0x40	; 64
    2db0:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_VidWriteCommand>
				}
	}
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <LCD_VidCGRAM>:
	

	void LCD_VidCGRAM(u8 *ptr,u8 LOC_u8AdressCGRAM,u8 LOC_u8Row,u8 LOC_u8Col,u8 LOC_u8Location)
	{
    2dbe:	0f 93       	push	r16
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	27 97       	sbiw	r28, 0x07	; 7
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	cd bf       	out	0x3d, r28	; 61
    2dd4:	9b 83       	std	Y+3, r25	; 0x03
    2dd6:	8a 83       	std	Y+2, r24	; 0x02
    2dd8:	6c 83       	std	Y+4, r22	; 0x04
    2dda:	4d 83       	std	Y+5, r20	; 0x05
    2ddc:	2e 83       	std	Y+6, r18	; 0x06
    2dde:	0f 83       	std	Y+7, r16	; 0x07
		LCD_VidWriteCommand(64+LOC_u8AdressCGRAM);
    2de0:	8c 81       	ldd	r24, Y+4	; 0x04
    2de2:	80 5c       	subi	r24, 0xC0	; 192
    2de4:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_VidWriteCommand>
		for(u8 i=0;i<8;i++)
    2de8:	19 82       	std	Y+1, r1	; 0x01
    2dea:	0e c0       	rjmp	.+28     	; 0x2e08 <LCD_VidCGRAM+0x4a>
		{
			LCD_VidWriteData(ptr[i]);
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	28 2f       	mov	r18, r24
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	9b 81       	ldd	r25, Y+3	; 0x03
    2df6:	fc 01       	movw	r30, r24
    2df8:	e2 0f       	add	r30, r18
    2dfa:	f3 1f       	adc	r31, r19
    2dfc:	80 81       	ld	r24, Z
    2dfe:	0e 94 33 13 	call	0x2666	; 0x2666 <LCD_VidWriteData>
	

	void LCD_VidCGRAM(u8 *ptr,u8 LOC_u8AdressCGRAM,u8 LOC_u8Row,u8 LOC_u8Col,u8 LOC_u8Location)
	{
		LCD_VidWriteCommand(64+LOC_u8AdressCGRAM);
		for(u8 i=0;i<8;i++)
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	8f 5f       	subi	r24, 0xFF	; 255
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	88 30       	cpi	r24, 0x08	; 8
    2e0c:	78 f3       	brcs	.-34     	; 0x2dec <LCD_VidCGRAM+0x2e>
		{
			LCD_VidWriteData(ptr[i]);
		}
		LCD_VidSetPosition(LOC_u8Row,LOC_u8Col);
    2e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e10:	6e 81       	ldd	r22, Y+6	; 0x06
    2e12:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <LCD_VidSetPosition>
		LCD_VidWriteData(LOC_u8Location);
    2e16:	8f 81       	ldd	r24, Y+7	; 0x07
    2e18:	0e 94 33 13 	call	0x2666	; 0x2666 <LCD_VidWriteData>
	}
    2e1c:	27 96       	adiw	r28, 0x07	; 7
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	0f 91       	pop	r16
    2e2e:	08 95       	ret

00002e30 <LCD_VidClearSpecificPosition>:
	
	
	
	void LCD_VidClearSpecificPosition(u8 LOC_u8Row,u8 LOC_u8StartColumn,u8 LOC_u8EndColumn)
	{
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	00 d0       	rcall	.+0      	; 0x2e36 <LCD_VidClearSpecificPosition+0x6>
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <LCD_VidClearSpecificPosition+0x8>
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	8a 83       	std	Y+2, r24	; 0x02
    2e3e:	6b 83       	std	Y+3, r22	; 0x03
    2e40:	4c 83       	std	Y+4, r20	; 0x04
		u8 i;
		for( i=LOC_u8StartColumn;i<=LOC_u8EndColumn;i++)
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	0a c0       	rjmp	.+20     	; 0x2e5c <LCD_VidClearSpecificPosition+0x2c>
		{
			LCD_VidSetPosition(LOC_u8Row,i);
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	69 81       	ldd	r22, Y+1	; 0x01
    2e4c:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <LCD_VidSetPosition>
			LCD_VidWriteData(' ');
    2e50:	80 e2       	ldi	r24, 0x20	; 32
    2e52:	0e 94 33 13 	call	0x2666	; 0x2666 <LCD_VidWriteData>
	
	
	void LCD_VidClearSpecificPosition(u8 LOC_u8Row,u8 LOC_u8StartColumn,u8 LOC_u8EndColumn)
	{
		u8 i;
		for( i=LOC_u8StartColumn;i<=LOC_u8EndColumn;i++)
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	8f 5f       	subi	r24, 0xFF	; 255
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	99 81       	ldd	r25, Y+1	; 0x01
    2e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e60:	89 17       	cp	r24, r25
    2e62:	90 f7       	brcc	.-28     	; 0x2e48 <LCD_VidClearSpecificPosition+0x18>
		{
			LCD_VidSetPosition(LOC_u8Row,i);
			LCD_VidWriteData(' ');
		}
	}
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <main>:

void Timer1_func(void);
void External_func(void);

int main(void)
{
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
	 /*LEDS TO CHECK*/
	DIO_VidSetPinDirection(DIO_PORTA,PIN3,OUTPUT);
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	63 e0       	ldi	r22, 0x03	; 3
    2e7e:	41 e0       	ldi	r20, 0x01	; 1
    2e80:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTA,PIN4,OUTPUT);
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	64 e0       	ldi	r22, 0x04	; 4
    2e88:	41 e0       	ldi	r20, 0x01	; 1
    2e8a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTA,PIN5,OUTPUT);
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	65 e0       	ldi	r22, 0x05	; 5
    2e92:	41 e0       	ldi	r20, 0x01	; 1
    2e94:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_VidSetPinDirection>

	/*PWM PIN FOR TIMER0*/
	DIO_VidSetPinDirection(DIO_PORTB,PIN3,OUTPUT);//OC0 PIN
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	63 e0       	ldi	r22, 0x03	; 3
    2e9c:	41 e0       	ldi	r20, 0x01	; 1
    2e9e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_VidSetPinDirection>

	/*SET CALL BACK FUNCTIONS*/
	INT0_VidSetCallBack(External_func);
    2ea2:	8a e9       	ldi	r24, 0x9A	; 154
    2ea4:	97 e1       	ldi	r25, 0x17	; 23
    2ea6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <INT0_VidSetCallBack>
	TMR1_VidSetCallBackForOVF(Timer1_func);
    2eaa:	85 e4       	ldi	r24, 0x45	; 69
    2eac:	98 e1       	ldi	r25, 0x18	; 24
    2eae:	0e 94 b9 07 	call	0xf72	; 0xf72 <TMR1_VidSetCallBackForOVF>

	/*LCD INIT*/
	LCD_VidIntilaization_8bit();
    2eb2:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_VidIntilaization_8bit>

	/*EXTERNAL INIT*/
	EXT0_ENABLE();
    2eb6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <EXT0_ENABLE>
	EXT0_MOOD(Rising_edge);
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	0e 94 a1 0b 	call	0x1742	; 0x1742 <EXT0_MOOD>

	/*TIMER1 INIT TO COUNT*/
	TMR1_VidInit();
    2ec0:	0e 94 88 08 	call	0x1110	; 0x1110 <TMR1_VidInit>
	TMR1_VidOverFlowInterruptEnable();
    2ec4:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <TMR1_VidOverFlowInterruptEnable>

	/*TIMER0 INIT FOR PWM*/
	TMR0_VidInit();
    2ec8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <TMR0_VidInit>

	/*SET PWM FOR TIMER0*/

	TMR0_VidSetDutyCycle(10);
    2ecc:	8a e0       	ldi	r24, 0x0A	; 10
    2ece:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <TMR0_VidSetDutyCycle>


	/*ENABLE GLOBAL INTERRUPT*/
	GIE_VidENABLE();
    2ed2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GIE_VidENABLE>


	/*CAPTURE VALUE OF TON & TOFF*/
	while(1)
	{
		if(flag == 3)
    2ed6:	80 91 8a 01 	lds	r24, 0x018A
    2eda:	83 30       	cpi	r24, 0x03	; 3
    2edc:	e1 f7       	brne	.-8      	; 0x2ed6 <main+0x64>
		{


			LCD_VidSetPosition(0,0);
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	60 e0       	ldi	r22, 0x00	; 0
    2ee2:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <LCD_VidSetPosition>
			LCD_VidWriteString("TON=");
    2ee6:	82 e6       	ldi	r24, 0x62	; 98
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_VidWriteString>
			LCD_VidWriteNum(TON);
    2eee:	80 91 8b 01 	lds	r24, 0x018B
    2ef2:	90 91 8c 01 	lds	r25, 0x018C
    2ef6:	a0 91 8d 01 	lds	r26, 0x018D
    2efa:	b0 91 8e 01 	lds	r27, 0x018E
    2efe:	bc 01       	movw	r22, r24
    2f00:	cd 01       	movw	r24, r26
    2f02:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <LCD_VidWriteNum>
			LCD_VidSetPosition(1,0);
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <LCD_VidSetPosition>
			LCD_VidWriteString("TOFF=");
    2f0e:	87 e6       	ldi	r24, 0x67	; 103
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_VidWriteString>
			LCD_VidWriteNum((TOFF));
    2f16:	80 91 8f 01 	lds	r24, 0x018F
    2f1a:	90 91 90 01 	lds	r25, 0x0190
    2f1e:	a0 91 91 01 	lds	r26, 0x0191
    2f22:	b0 91 92 01 	lds	r27, 0x0192
    2f26:	bc 01       	movw	r22, r24
    2f28:	cd 01       	movw	r24, r26
    2f2a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <LCD_VidWriteNum>

			flag=0;
    2f2e:	10 92 8a 01 	sts	0x018A, r1
    2f32:	d1 cf       	rjmp	.-94     	; 0x2ed6 <main+0x64>

00002f34 <External_func>:
}


/******************************************************************************************/
void External_func(void)
{
    2f34:	ef 92       	push	r14
    2f36:	ff 92       	push	r15
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
	if(flag == 0)
    2f44:	80 91 8a 01 	lds	r24, 0x018A
    2f48:	88 23       	and	r24, r24
    2f4a:	c1 f4       	brne	.+48     	; 0x2f7c <External_func+0x48>
	{
		DIO_VidSetPinValue(DIO_PORTA,PIN3,HIGH);
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	63 e0       	ldi	r22, 0x03	; 3
    2f50:	41 e0       	ldi	r20, 0x01	; 1
    2f52:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_VidSetPinValue>
		TCNT1=0;
    2f56:	ec e4       	ldi	r30, 0x4C	; 76
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	11 82       	std	Z+1, r1	; 0x01
    2f5c:	10 82       	st	Z, r1
		OVF_Counter=0;
    2f5e:	10 92 93 01 	sts	0x0193, r1
    2f62:	10 92 94 01 	sts	0x0194, r1
    2f66:	10 92 95 01 	sts	0x0195, r1
    2f6a:	10 92 96 01 	sts	0x0196, r1
		EXT0_MOOD(Falling_edge);
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	0e 94 a1 0b 	call	0x1742	; 0x1742 <EXT0_MOOD>
		flag=1;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	80 93 8a 01 	sts	0x018A, r24
    2f7a:	80 c0       	rjmp	.+256    	; 0x307c <External_func+0x148>
	}
	else if(flag == 1)
    2f7c:	80 91 8a 01 	lds	r24, 0x018A
    2f80:	81 30       	cpi	r24, 0x01	; 1
    2f82:	f1 f5       	brne	.+124    	; 0x3000 <External_func+0xcc>
	{
		DIO_VidSetPinValue(DIO_PORTA,PIN4,HIGH);
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	64 e0       	ldi	r22, 0x04	; 4
    2f88:	41 e0       	ldi	r20, 0x01	; 1
    2f8a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_VidSetPinValue>
		TON=(u8)TCNT1+(OVF_Counter*65535);
    2f8e:	ec e4       	ldi	r30, 0x4C	; 76
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	91 81       	ldd	r25, Z+1	; 0x01
    2f96:	e8 2e       	mov	r14, r24
    2f98:	ff 24       	eor	r15, r15
    2f9a:	00 e0       	ldi	r16, 0x00	; 0
    2f9c:	10 e0       	ldi	r17, 0x00	; 0
    2f9e:	80 91 93 01 	lds	r24, 0x0193
    2fa2:	90 91 94 01 	lds	r25, 0x0194
    2fa6:	a0 91 95 01 	lds	r26, 0x0195
    2faa:	b0 91 96 01 	lds	r27, 0x0196
    2fae:	2f ef       	ldi	r18, 0xFF	; 255
    2fb0:	3f ef       	ldi	r19, 0xFF	; 255
    2fb2:	40 e0       	ldi	r20, 0x00	; 0
    2fb4:	50 e0       	ldi	r21, 0x00	; 0
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 5f 18 	call	0x30be	; 0x30be <__mulsi3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	8e 0d       	add	r24, r14
    2fc4:	9f 1d       	adc	r25, r15
    2fc6:	a0 1f       	adc	r26, r16
    2fc8:	b1 1f       	adc	r27, r17
    2fca:	80 93 8b 01 	sts	0x018B, r24
    2fce:	90 93 8c 01 	sts	0x018C, r25
    2fd2:	a0 93 8d 01 	sts	0x018D, r26
    2fd6:	b0 93 8e 01 	sts	0x018E, r27
		TCNT1=0;
    2fda:	ec e4       	ldi	r30, 0x4C	; 76
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	11 82       	std	Z+1, r1	; 0x01
    2fe0:	10 82       	st	Z, r1
		OVF_Counter=0;
    2fe2:	10 92 93 01 	sts	0x0193, r1
    2fe6:	10 92 94 01 	sts	0x0194, r1
    2fea:	10 92 95 01 	sts	0x0195, r1
    2fee:	10 92 96 01 	sts	0x0196, r1
		EXT0_MOOD(Rising_edge);
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <EXT0_MOOD>
		flag=2;
    2ff8:	82 e0       	ldi	r24, 0x02	; 2
    2ffa:	80 93 8a 01 	sts	0x018A, r24
    2ffe:	3e c0       	rjmp	.+124    	; 0x307c <External_func+0x148>
	}
	else if(flag == 2)
    3000:	80 91 8a 01 	lds	r24, 0x018A
    3004:	82 30       	cpi	r24, 0x02	; 2
    3006:	d1 f5       	brne	.+116    	; 0x307c <External_func+0x148>
	{
		DIO_VidSetPinValue(DIO_PORTA,PIN5,HIGH);
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	65 e0       	ldi	r22, 0x05	; 5
    300c:	41 e0       	ldi	r20, 0x01	; 1
    300e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_VidSetPinValue>
		TOFF=(u8)TCNT1+( OVF_Counter*65535 );
    3012:	ec e4       	ldi	r30, 0x4C	; 76
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	e8 2e       	mov	r14, r24
    301c:	ff 24       	eor	r15, r15
    301e:	00 e0       	ldi	r16, 0x00	; 0
    3020:	10 e0       	ldi	r17, 0x00	; 0
    3022:	80 91 93 01 	lds	r24, 0x0193
    3026:	90 91 94 01 	lds	r25, 0x0194
    302a:	a0 91 95 01 	lds	r26, 0x0195
    302e:	b0 91 96 01 	lds	r27, 0x0196
    3032:	2f ef       	ldi	r18, 0xFF	; 255
    3034:	3f ef       	ldi	r19, 0xFF	; 255
    3036:	40 e0       	ldi	r20, 0x00	; 0
    3038:	50 e0       	ldi	r21, 0x00	; 0
    303a:	bc 01       	movw	r22, r24
    303c:	cd 01       	movw	r24, r26
    303e:	0e 94 5f 18 	call	0x30be	; 0x30be <__mulsi3>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	8e 0d       	add	r24, r14
    3048:	9f 1d       	adc	r25, r15
    304a:	a0 1f       	adc	r26, r16
    304c:	b1 1f       	adc	r27, r17
    304e:	80 93 8f 01 	sts	0x018F, r24
    3052:	90 93 90 01 	sts	0x0190, r25
    3056:	a0 93 91 01 	sts	0x0191, r26
    305a:	b0 93 92 01 	sts	0x0192, r27
		TCNT1=0;
    305e:	ec e4       	ldi	r30, 0x4C	; 76
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	11 82       	std	Z+1, r1	; 0x01
    3064:	10 82       	st	Z, r1
		OVF_Counter=0;
    3066:	10 92 93 01 	sts	0x0193, r1
    306a:	10 92 94 01 	sts	0x0194, r1
    306e:	10 92 95 01 	sts	0x0195, r1
    3072:	10 92 96 01 	sts	0x0196, r1
		flag=3;
    3076:	83 e0       	ldi	r24, 0x03	; 3
    3078:	80 93 8a 01 	sts	0x018A, r24
	}
}
    307c:	cf 91       	pop	r28
    307e:	df 91       	pop	r29
    3080:	1f 91       	pop	r17
    3082:	0f 91       	pop	r16
    3084:	ff 90       	pop	r15
    3086:	ef 90       	pop	r14
    3088:	08 95       	ret

0000308a <Timer1_func>:

/************************************************************************************************/
void Timer1_func(void)
{
    308a:	df 93       	push	r29
    308c:	cf 93       	push	r28
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
	OVF_Counter++;
    3092:	80 91 93 01 	lds	r24, 0x0193
    3096:	90 91 94 01 	lds	r25, 0x0194
    309a:	a0 91 95 01 	lds	r26, 0x0195
    309e:	b0 91 96 01 	lds	r27, 0x0196
    30a2:	01 96       	adiw	r24, 0x01	; 1
    30a4:	a1 1d       	adc	r26, r1
    30a6:	b1 1d       	adc	r27, r1
    30a8:	80 93 93 01 	sts	0x0193, r24
    30ac:	90 93 94 01 	sts	0x0194, r25
    30b0:	a0 93 95 01 	sts	0x0195, r26
    30b4:	b0 93 96 01 	sts	0x0196, r27
}
    30b8:	cf 91       	pop	r28
    30ba:	df 91       	pop	r29
    30bc:	08 95       	ret

000030be <__mulsi3>:
    30be:	62 9f       	mul	r22, r18
    30c0:	d0 01       	movw	r26, r0
    30c2:	73 9f       	mul	r23, r19
    30c4:	f0 01       	movw	r30, r0
    30c6:	82 9f       	mul	r24, r18
    30c8:	e0 0d       	add	r30, r0
    30ca:	f1 1d       	adc	r31, r1
    30cc:	64 9f       	mul	r22, r20
    30ce:	e0 0d       	add	r30, r0
    30d0:	f1 1d       	adc	r31, r1
    30d2:	92 9f       	mul	r25, r18
    30d4:	f0 0d       	add	r31, r0
    30d6:	83 9f       	mul	r24, r19
    30d8:	f0 0d       	add	r31, r0
    30da:	74 9f       	mul	r23, r20
    30dc:	f0 0d       	add	r31, r0
    30de:	65 9f       	mul	r22, r21
    30e0:	f0 0d       	add	r31, r0
    30e2:	99 27       	eor	r25, r25
    30e4:	72 9f       	mul	r23, r18
    30e6:	b0 0d       	add	r27, r0
    30e8:	e1 1d       	adc	r30, r1
    30ea:	f9 1f       	adc	r31, r25
    30ec:	63 9f       	mul	r22, r19
    30ee:	b0 0d       	add	r27, r0
    30f0:	e1 1d       	adc	r30, r1
    30f2:	f9 1f       	adc	r31, r25
    30f4:	bd 01       	movw	r22, r26
    30f6:	cf 01       	movw	r24, r30
    30f8:	11 24       	eor	r1, r1
    30fa:	08 95       	ret

000030fc <__divmodhi4>:
    30fc:	97 fb       	bst	r25, 7
    30fe:	09 2e       	mov	r0, r25
    3100:	07 26       	eor	r0, r23
    3102:	0a d0       	rcall	.+20     	; 0x3118 <__divmodhi4_neg1>
    3104:	77 fd       	sbrc	r23, 7
    3106:	04 d0       	rcall	.+8      	; 0x3110 <__divmodhi4_neg2>
    3108:	2e d0       	rcall	.+92     	; 0x3166 <__udivmodhi4>
    310a:	06 d0       	rcall	.+12     	; 0x3118 <__divmodhi4_neg1>
    310c:	00 20       	and	r0, r0
    310e:	1a f4       	brpl	.+6      	; 0x3116 <__divmodhi4_exit>

00003110 <__divmodhi4_neg2>:
    3110:	70 95       	com	r23
    3112:	61 95       	neg	r22
    3114:	7f 4f       	sbci	r23, 0xFF	; 255

00003116 <__divmodhi4_exit>:
    3116:	08 95       	ret

00003118 <__divmodhi4_neg1>:
    3118:	f6 f7       	brtc	.-4      	; 0x3116 <__divmodhi4_exit>
    311a:	90 95       	com	r25
    311c:	81 95       	neg	r24
    311e:	9f 4f       	sbci	r25, 0xFF	; 255
    3120:	08 95       	ret

00003122 <__udivmodsi4>:
    3122:	a1 e2       	ldi	r26, 0x21	; 33
    3124:	1a 2e       	mov	r1, r26
    3126:	aa 1b       	sub	r26, r26
    3128:	bb 1b       	sub	r27, r27
    312a:	fd 01       	movw	r30, r26
    312c:	0d c0       	rjmp	.+26     	; 0x3148 <__udivmodsi4_ep>

0000312e <__udivmodsi4_loop>:
    312e:	aa 1f       	adc	r26, r26
    3130:	bb 1f       	adc	r27, r27
    3132:	ee 1f       	adc	r30, r30
    3134:	ff 1f       	adc	r31, r31
    3136:	a2 17       	cp	r26, r18
    3138:	b3 07       	cpc	r27, r19
    313a:	e4 07       	cpc	r30, r20
    313c:	f5 07       	cpc	r31, r21
    313e:	20 f0       	brcs	.+8      	; 0x3148 <__udivmodsi4_ep>
    3140:	a2 1b       	sub	r26, r18
    3142:	b3 0b       	sbc	r27, r19
    3144:	e4 0b       	sbc	r30, r20
    3146:	f5 0b       	sbc	r31, r21

00003148 <__udivmodsi4_ep>:
    3148:	66 1f       	adc	r22, r22
    314a:	77 1f       	adc	r23, r23
    314c:	88 1f       	adc	r24, r24
    314e:	99 1f       	adc	r25, r25
    3150:	1a 94       	dec	r1
    3152:	69 f7       	brne	.-38     	; 0x312e <__udivmodsi4_loop>
    3154:	60 95       	com	r22
    3156:	70 95       	com	r23
    3158:	80 95       	com	r24
    315a:	90 95       	com	r25
    315c:	9b 01       	movw	r18, r22
    315e:	ac 01       	movw	r20, r24
    3160:	bd 01       	movw	r22, r26
    3162:	cf 01       	movw	r24, r30
    3164:	08 95       	ret

00003166 <__udivmodhi4>:
    3166:	aa 1b       	sub	r26, r26
    3168:	bb 1b       	sub	r27, r27
    316a:	51 e1       	ldi	r21, 0x11	; 17
    316c:	07 c0       	rjmp	.+14     	; 0x317c <__udivmodhi4_ep>

0000316e <__udivmodhi4_loop>:
    316e:	aa 1f       	adc	r26, r26
    3170:	bb 1f       	adc	r27, r27
    3172:	a6 17       	cp	r26, r22
    3174:	b7 07       	cpc	r27, r23
    3176:	10 f0       	brcs	.+4      	; 0x317c <__udivmodhi4_ep>
    3178:	a6 1b       	sub	r26, r22
    317a:	b7 0b       	sbc	r27, r23

0000317c <__udivmodhi4_ep>:
    317c:	88 1f       	adc	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	5a 95       	dec	r21
    3182:	a9 f7       	brne	.-22     	; 0x316e <__udivmodhi4_loop>
    3184:	80 95       	com	r24
    3186:	90 95       	com	r25
    3188:	bc 01       	movw	r22, r24
    318a:	cd 01       	movw	r24, r26
    318c:	08 95       	ret

0000318e <__prologue_saves__>:
    318e:	2f 92       	push	r2
    3190:	3f 92       	push	r3
    3192:	4f 92       	push	r4
    3194:	5f 92       	push	r5
    3196:	6f 92       	push	r6
    3198:	7f 92       	push	r7
    319a:	8f 92       	push	r8
    319c:	9f 92       	push	r9
    319e:	af 92       	push	r10
    31a0:	bf 92       	push	r11
    31a2:	cf 92       	push	r12
    31a4:	df 92       	push	r13
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	0f 93       	push	r16
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	ca 1b       	sub	r28, r26
    31b8:	db 0b       	sbc	r29, r27
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	09 94       	ijmp

000031c6 <__epilogue_restores__>:
    31c6:	2a 88       	ldd	r2, Y+18	; 0x12
    31c8:	39 88       	ldd	r3, Y+17	; 0x11
    31ca:	48 88       	ldd	r4, Y+16	; 0x10
    31cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    31ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    31d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    31d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    31d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    31d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    31d8:	b9 84       	ldd	r11, Y+9	; 0x09
    31da:	c8 84       	ldd	r12, Y+8	; 0x08
    31dc:	df 80       	ldd	r13, Y+7	; 0x07
    31de:	ee 80       	ldd	r14, Y+6	; 0x06
    31e0:	fd 80       	ldd	r15, Y+5	; 0x05
    31e2:	0c 81       	ldd	r16, Y+4	; 0x04
    31e4:	1b 81       	ldd	r17, Y+3	; 0x03
    31e6:	aa 81       	ldd	r26, Y+2	; 0x02
    31e8:	b9 81       	ldd	r27, Y+1	; 0x01
    31ea:	ce 0f       	add	r28, r30
    31ec:	d1 1d       	adc	r29, r1
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	f8 94       	cli
    31f2:	de bf       	out	0x3e, r29	; 62
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	cd bf       	out	0x3d, r28	; 61
    31f8:	ed 01       	movw	r28, r26
    31fa:	08 95       	ret

000031fc <_exit>:
    31fc:	f8 94       	cli

000031fe <__stop_program>:
    31fe:	ff cf       	rjmp	.-2      	; 0x31fe <__stop_program>
